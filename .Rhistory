DO_offset_2 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_2,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_3 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_3,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
files_filter <- data_files[grepl(metadata_filter$Date,data_files)]
data_1 <- files_filter[grepl(sn_1,files_filter)] %>%
read_csv(., skip = 2)%>%
mutate(DO_offset = combined$`DO (mg/l)` * DO_offset_1)
data_2 <- files_filter[grepl(sn_2,files_filter)] %>%
read_csv(., skip = 2)%>%
mutate(DO_offset = combined$`DO (mg/l)` * DO_offset_2)
data_3 <- files_filter[grepl(sn_3,files_filter)] %>%
read_csv(., skip = 2)%>%
mutate(DO_offset = combined$`DO (mg/l)` * DO_offset_3)
DO_offset_file <- 'Z:/RC2/01_Sensor_Calibration_and_Correction_Files/01_Minidot.bucket/05_MiniDotCorrectionFactors/minidot_correction_factors_2024-02-21.csv'
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_1,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_1,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
sn_1
DO_offset_1 <- read_csv(DO_offset_file)
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_1
)
DO_offset_1 <- read_csv(DO_offset_file)
View(DO_offset_1)
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == paste0('7450-', sn_1),
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
paste0('7450-', sn_1)
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == paste0('7450-', sn_1)
)
View(DO_offset_1)
DO_offset_2 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_2,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_3 <- read_csv(DO_offset_file) %>%
filter(serial_number == sn_3,
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == paste0('7450-', sn_1),
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == paste0('7450-', sn_1),
mdy(test_date) < as_datetime(date))
DO_offset_1 <- read_csv(DO_offset_file) %>%
filter(serial_number == paste0('7450-', sn_1),
mdy(test_date) < as_datetime(date)) %>%
tail(1) %>%
select(mean_data_correction_factor) %>%
pull()
DO_offset_2 <- read_csv(DO_offset_file)
View(DO_offset_2)
rm(list=ls(all=TRUE))
# ==============================================================================
library(tidyverse)
library(lubridate)
# ================================= User inputs ================================
metadata_file <- 'Z:/00_Cross-SFA_ESSDIVE-Data-Package-Upload/01_Study-Data-Package-Folders/00_ARCHIVE-WHEN-PUBLISHED/SFA_SpatialStudy_2021_SensorData_v2/SFA_SpatialStudy_2021_SensorData_v2/SPS_Sensor_Field_Metadata.csv'
data_dir <- 'Z:/RC2/04_Spatial_Study_2021/03_MinidotManualChamber2hr'
DO_offset_file <- 'Z:/RC2/01_Sensor_Calibration_and_Correction_Files/01_Minidot.bucket/05_MiniDotCorrectionFactors/minidot_correction_factors_2024-02-21.csv'
temp_data <- 'Z:\00_Cross-SFA_ESSDIVE-Data-Package-Upload\01_Study-Data-Package-Folders\SFA_SpatialStudy_2021_SensorData_v3\v3_SFA_SpatialStudy_2021_SensorData\MinidotManualChamber\Data'
baro_file_dir <- ''
# ================================= find files ================================
metadata <- read_csv(metadata_file)
data_files <- list.files(paste0(data_dir, '/01_RawData'), full.names = T, recursive = T)
site_IDs <- metadata$Site_ID
data_combined <- read_csv(temp_data, comment = '#')
baro_files <- list.files(baro_file_dir, full.names = T, recursive = T)
baro_file_dir
temp_data <- 'Z:/00_Cross-SFA_ESSDIVE-Data-Package-Upload/01_Study-Data-Package-Folders/SFA_SpatialStudy_2021_SensorData_v3/v3_SFA_SpatialStudy_2021_SensorData/MinidotManualChamber/Data'
baro_file_dir <- 'Z:/00_Cross-SFA_ESSDIVE-Data-Package-Upload/01_Study-Data-Package-Folders/SFA_SpatialStudy_2021_SensorData_v3/v3_SFA_SpatialStudy_2021_SensorData/BarotrollAtm/Data'
baro_files <- list.files(baro_file_dir, full.names = T, recursive = T)
site_ID <- site_IDs[1]
data_combined <- read_csv(temp_data, comment = '#')
temp_file <- temp_data[grepl(site_ID,temp_data)]
site_ID
temp_data
temp_files <- list.files(temp_data, full.names = T, recursive = T)
temp_file <- temp_files[grepl(site_ID,temp_files)]
temp_file
data_1 <- temp_file[1]%>%
read_csv()
View(data_1)
data_1 <- temp_file[1]%>%
read_csv(comment = '#')
View(data_1)
data_1 <- temp_file[1]%>%
read_csv(comment = '#')
data_2 <- temp_file[2]%>%
read_csv(comment = '#')
data_2 <- temp_file[3]%>%
read_csv(comment = '#')
data_2 <- temp_file[2]%>%
read_csv(comment = '#')
data_3 <- temp_file[3]%>%
read_csv(comment = '#')
View(data_1)
View(data_2)
View(data_3)
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
mutate(Dissolved_Oxygen_Saturation = NA)
View(data_1)
library(streamMetabolizer)
baro_file <- baro_files[grepl(site_ID,baro_files)]
baro_data <- baro_files[grepl(site_ID,baro_files)] %>%
read_csv(comment = '#')
View(baro_data)
View(data_1)
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
left_join(baro_data)
View(baro_data)
baro_data <- baro_files[grepl(site_ID,baro_files)] %>%
read_csv(comment = '#') %>%
select(-Air_Temperature)
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
left_join(baro_data)
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
left_join(baro_data) %>%
mutate(DO_sat = calc_DO_sat(Temperature, Pressure, model = "garcia-benson"), #Pressure is from baro and in mbar. Temperature is from minidot and in degC
DO_perc_sat = 100 * (DO_mg_l/DO_sat))
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
left_join(baro_data) %>%
mutate(DO_sat = calc_DO_sat(Temperature, Pressure, model = "garcia-benson"), #Pressure is from baro and in mbar. Temperature is from minidot and in degC
DO_perc_sat = 100 * (Dissolved_Oxygen/DO_sat))
plot(data_1$Dissolved_Oxygen_Saturation, data_1$DO_perc_sat)
plot <- ggplot(data = data_1, aes(x = DO_perc_sat, y = Dissolved_Oxygen_Saturation)) +
geom_point()+
geom_abline(slope=1, intercept = 0, color = 'grey')
plot
plot <- ggplot(data = data_1, aes(x = DO_perc_sat, y = Dissolved_Oxygen_Saturation)) +
geom_point()+
geom_abline(slope=1, intercept = 0, color = 'red')
plot
plot <- ggplot(data = data_1, aes(x = DO_perc_sat, y = Dissolved_Oxygen_Saturation)) +
geom_point()+
geom_abline(slope=1, intercept = 0, color = 'red')+
coord_equal()
plot
plot <- ggplot(data = data_1, aes(x = DO_perc_sat, y = Dissolved_Oxygen_Saturation)) +
geom_point()+
geom_abline(slope=1, intercept = 0, color = 'red')+
lims(x = c(92, 102),
y = c(92, 102))
plot
lm(y~x, y = data_1$Dissolved_Oxygen_Saturation, x = data_1$DO_perc_sat)
lm(formula = data_1$Dissolved_Oxygen_Saturation ~data_1$DO_perc_sat)
summary(lm(formula = data_1$Dissolved_Oxygen_Saturation ~data_1$DO_perc_sat))
data_1 <- temp_file[1]%>%
read_csv(comment = '#') %>%
left_join(baro_data) %>%
mutate(DO_sat = calc_DO_sat(Temperature, Pressure, model = "garcia-benson"), #Pressure is from baro and in mbar. Temperature is from minidot and in degC
Dissolved_Oxygen_Saturation  = 100 * (Dissolved_Oxygen/DO_sat)) %>%
select(-Pressure, -DO_sat)
baro_header <-  baro_files[grepl(site_ID,baro_files)] %>%
read_csv() %>%
filter('#'%in% 1)
View(baro_header)
baro_header <-  baro_files[grepl(site_ID,baro_files)] %>%
read_csv(col_names = F)
baro_header <-  baro_files[grepl(site_ID,baro_files)] %>%
read_csv(col_names = F) %>%
head(6)
baro_header <-  baro_files[grepl(site_ID,baro_files)] %>%
read_csv(col_names = F) %>%
head(5)
temp_file[1]%>%
read_csv(
)
data_1 <- temp_file[1]%>%
read_csv(col_names = F) %>% head(7)
View(data_1)
data_header <-  tibble(
header = c('# HeaderRows_8',
'# HeaderRows_Format: Column_Header; Unit; InstallationMethod_ID; Instrument_Summary',
'# DateTime; YYYY-MM-DD hh:mm:ss UTC-08:00; ManualChamberDark_01; PME MiniDOT Logger real time clock.',
'# Battery; volts; ManualChamberDark_01; PME MiniDOT Logger internal batteries.',
'# Temperature; degree_celsius; ManualChamberDark_01; PME MiniDOT Logger with temperature sensor.',
'# Dissolved_Oxygen; milligrams_per_liter; ManualChamberDark_01; PME MiniDOT Logger with optical dissolved oxygen sensor (fluorescence quenching).',
'# Dissolved_Oxygen_Saturation; percent_saturation; ManualChamberDark_01; PME MiniDOT Logger with optical dissolved oxygen sensor (fluorescence quenching).'
))
library(tools)
basename(temp_file[1])
out_path_1 <- paste0(data_dir, '/03_ProcessedData/v2_', basename(temp_file[1]))
out_path_1
write_csv(data_header, out_path_1, col_names = F, append = F)
library(tidyverse)
library(magick)
library(rsvg)
library(fs)
# ================================= User inputs ================================
photo_dir <- 'C:/Users/forb086/OneDrive - PNNL/Documents/Brieanne/temp/'
out_dir <- 'C:/Users/forb086/OneDrive - PNNL/Documents/Brieanne/temp/'
# ================================= convert photo ==============================
photos <- list.files(photo_dir, '.HEIC|.heic', full.names = T, recursive = T)
for (photo in photos) {
photo_read <- magick::image_read(photo)
file_name <- path_file(photo) %>%
str_replace(., '.heic', '.jpeg')%>%
str_replace(., '.HEIC', '.jpeg')
new_name <- paste0(out_dir, file_name)
# new_name <- photo %>%
#   str_replace(., '.heic', '.jpeg')%>%
#   str_replace(., '.HEIC', '.jpeg')
#
image_write(photo_read, new_name, format = 'jpeg')
}
# RC2 spatial study
# calculate ERwc
# X Lin Oct 30 2020
rm(list=ls(all=TRUE))
library(xlsx)
library(tidyverse)
#setwd('//pnl/projects/SBR_SFA/RC2/04_Spatial_Study/02_MantaRiver/03_ProcessedData/')
#setwd('C:/Users/linx882/OneDrive - PNNL/XLin/automation of respiration calculations/RC_2/sss_data_processing/codes')
#source('./MRhelper.R')
sdir<- 'C:/Brieanne/GitHub/SSS_metabolism/'
# findir<- 'C:/Users/forb086/Downloads/v3_SSS_Data_Package/'
findir<- "C:/Users/forb086/OneDrive - PNNL/Spatial Study 2022/03_MinidotManualChamber2hr/03_ProcessedData/MinidotManualChamber_Summary_Statistics.csv"
##########################################################################
## DO slope
# DO_summary<-read_csv(file.path(findir,'miniDOTManualChamber/Plots_and_Summary_Statistics','SSS_Water_DO_Temp_Summary.csv'), comment='#', na = c('N/A', -9999))
DO_summary<-read_csv(findir, comment='#', na = c('N/A', -9999))
Do_slope<-DO_summary%>%select(Date,Parent_ID,Site_ID,Dissolved_Oxygen_1_Slope,
Dissolved_Oxygen_2_Slope,Dissolved_Oxygen_3_Slope,
Dissolved_Oxygen_1_NRMSE,Dissolved_Oxygen_2_NRMSE,Dissolved_Oxygen_3_NRMSE)
for (i in c(1:3)){
k = which(Do_slope[,paste0('Dissolved_Oxygen_',i,'_NRMSE')]>0.03)
Do_slope[k,paste0('Dissolved_Oxygen_',i,'_Slope')]<-NA
}
Do_slope<-DO_summary%>%select(Date,Parent_ID,Site_ID,Dissolved_Oxygen_1_Slope,
Dissolved_Oxygen_2_Slope,Dissolved_Oxygen_3_Slope,
Dissolved_Oxygen_1_NRMSE,Dissolved_Oxygen_2_NRMSE,Dissolved_Oxygen_3_NRMSE)
View(Do_slope)
for (i in c(1:3)){
k = which(Do_slope[,paste0('Dissolved_Oxygen_',i,'_NRMSE')]>0.03)
Do_slope[k,paste0('Dissolved_Oxygen_',i,'_Slope')]<-NA
}
## mean_slope: milligrams_per_liter_per_minute(mg/L/min <-->g/m3/min)
Do_slope['DO_Slope_mean']<-rowMeans(Do_slope[,grep('Slope',names(Do_slope))],na.rm = TRUE)
# mean depth
mean_depth<- read_csv("C:/Users/forb086/Downloads/v2_SSS_Data_Package/v2_SSS_Water_Depth_Summary.csv", comment = '#')
mean_depth$mean_reach_depth_m <- mean_depth$Average_Depth/100
#
Do_slope<- merge(Do_slope,mean_depth[c("Site_ID","mean_reach_depth_m")],by=c('Site_ID'))
# calculate ER water
Do_slope['ERwaterdaily_gO2/m2day'] <-Do_slope$DO_Slope_mean*(60*24*60)*Do_slope$mean_reach_depth_m
ERwater<-Do_slope[c("Site_ID",'ERwaterdaily_gO2/m2day')]
#########################
ERtotal <- read_csv(file.path(sdir,'/Stream_Metabolizer/Outputs/v2_SSS_combined_SM_results.csv'), na = '-9999')
# names(ERwater)[1]<-'SiteID'
ERtotal<-merge(ERtotal,ERwater,by=c('Site_ID'))
##
#calculate ER sed
ERtotal['ERseddaily_gO2/m2day']<-ERtotal$`ERdailymeanmean_gO2/m2day`-ERtotal$`ERwaterdaily_gO2/m2day`
#subset to needed columns, rename, and round
final_data <- ERtotal %>%
select("Site_ID","Parent_ID", "ERdailymeanmean_gO2/m2day", "ERwaterdaily_gO2/m2day","ERseddaily_gO2/m2day","GPPdailymeanmean_gO2/m2day") %>%
rename(Total_Ecosystem_Respiration_Square = "ERdailymeanmean_gO2/m2day",
Water_Column_Respiration_Square = "ERwaterdaily_gO2/m2day",
Sediment_Respiration_Square = "ERseddaily_gO2/m2day",
Gross_Primary_Production_Square = "GPPdailymeanmean_gO2/m2day") %>%
mutate(Total_Ecosystem_Respiration_Square = round(Total_Ecosystem_Respiration_Square, 2),
Water_Column_Respiration_Square = signif(Water_Column_Respiration_Square, 3),
Sediment_Respiration_Square = round(Sediment_Respiration_Square, 2),
Gross_Primary_Production_Square = round(Gross_Primary_Production_Square, 2))
header <- tibble(x1 = c('# HeaderRows_7',
'# HeaderRows_Format: Column_Header; Unit; InstallationMethod_ID; Instrument_Summary',
'# Total_Ecosystem_Respiration_Square; grams_O2_per_square_meter_per_day; N/A; Estimated via streamMetabolizer model.',
'# Water_Column_Respiration_Square; grams_O2_per_square_meter_per_day; ManualChamberDark_02; PME MiniDOT Logger with optical dissolved oxygen sensor (fluorescence quenching).',
'# Sediment_Respiration_Square; grams_O2_per_square_meter_per_day; N/A; Calculated using Ecosystem Respiration from the streamMetabolizer model and Water Column Respiration from PME MiniDOT logger manual chamber.',
'# Gross_Primary_Production_Square; grams_O2_per_square_meter_per_day; N/A; Estimated via streamMetabolizer model.')
)
file.path(sdir,'v2_SSS_Ecosystem_Respiration_Data_Package_STAGING/v2_SSS_Water_Sediment_Total_Respiration_GPP.csv')
write_csv(header,file.path(sdir,'Stream_Metabolizer/v2_SSS_Water_Sediment_Total_Respiration_GPP.csv'), append = F, col_names = F)
write_csv(final_data,file.path(sdir,'Stream_Metabolizer/v2_SSS_Water_Sediment_Total_Respiration_GPP.csv'), na = '-9999', append = T, col_names = T)
View(ERwater)
colnames(ERwater)
ERwater <- ERwater %>%
mutate(`ERwaterdaily_gO2/m2day_test` = case_when(`ERwaterdaily_gO2/m2day` > 0 ~ 0,
TRUE ~ `ERwaterdaily_gO2/m2day`))
#########################
ERtotal <- read_csv(file.path(sdir,'/Stream_Metabolizer/Outputs/v2_SSS_combined_SM_results.csv'), na = '-9999')
# names(ERwater)[1]<-'SiteID'
ERtotal<-merge(ERtotal,ERwater,by=c('Site_ID'))
##
#calculate ER sed
ERtotal['ERseddaily_gO2/m2day']<-ERtotal$`ERdailymeanmean_gO2/m2day`-ERtotal$`ERwaterdaily_gO2/m2day`
#subset to needed columns, rename, and round
final_data <- ERtotal %>%
select("Site_ID","Parent_ID", "ERdailymeanmean_gO2/m2day", "ERwaterdaily_gO2/m2day","ERseddaily_gO2/m2day","GPPdailymeanmean_gO2/m2day") %>%
rename(Total_Ecosystem_Respiration_Square = "ERdailymeanmean_gO2/m2day",
Water_Column_Respiration_Square = "ERwaterdaily_gO2/m2day",
Sediment_Respiration_Square = "ERseddaily_gO2/m2day",
Gross_Primary_Production_Square = "GPPdailymeanmean_gO2/m2day") %>%
mutate(Total_Ecosystem_Respiration_Square = round(Total_Ecosystem_Respiration_Square, 2),
Water_Column_Respiration_Square = signif(Water_Column_Respiration_Square, 3),
Sediment_Respiration_Square = round(Sediment_Respiration_Square, 2),
Gross_Primary_Production_Square = round(Gross_Primary_Production_Square, 2))
header <- tibble(x1 = c('# HeaderRows_7',
'# HeaderRows_Format: Column_Header; Unit; InstallationMethod_ID; Instrument_Summary',
'# Total_Ecosystem_Respiration_Square; grams_O2_per_square_meter_per_day; N/A; Estimated via streamMetabolizer model.',
'# Water_Column_Respiration_Square; grams_O2_per_square_meter_per_day; ManualChamberDark_02; PME MiniDOT Logger with optical dissolved oxygen sensor (fluorescence quenching).',
'# Sediment_Respiration_Square; grams_O2_per_square_meter_per_day; N/A; Calculated using Ecosystem Respiration from the streamMetabolizer model and Water Column Respiration from PME MiniDOT logger manual chamber.',
'# Gross_Primary_Production_Square; grams_O2_per_square_meter_per_day; N/A; Estimated via streamMetabolizer model.')
)
write_csv(header,file.path(sdir,'Stream_Metabolizer/v2_SSS_Water_Sediment_Total_Respiration_GPP.csv'), append = F, col_names = F)
write_csv(final_data,file.path(sdir,'Stream_Metabolizer/v2_SSS_Water_Sediment_Total_Respiration_GPP.csv'), na = '-9999', append = T, col_names = T)
source("C:/Brieanne/GitHub/SSS_metabolism/Code/SSS_Calculate_ER_water_columns_BF.R", echo=TRUE)
#########################
ERtotal <- read_csv(file.path(sdir,'/Stream_Metabolizer/Outputs/v2_SSS_combined_SM_results.csv'), na = '-9999')
# names(ERwater)[1]<-'SiteID'
ERtotal<-merge(ERtotal,ERwater,by=c('Site_ID'))
View(ERtotal)
source("C:/Brieanne/GitHub/SSS_metabolism/Code/SSS_Calculate_ER_water_columns_BF.R", echo=TRUE)
View(mean_depth)
library(tidyverse)
library(lubridate)
library(streamMetabolizer)
# ================================= User inputs ================================
minidot_dir <- ('Z:/RC2/01_Sensor_Calibration_and_Correction_Files/01_Minidot.bucket/01_RawData')
extech_file <- ('Z:/RC2/01_Sensor_Calibration_and_Correction_Files/02_Extech.hpa/04_MergedData/Extech_HPA_Merged_2024-01-25.csv')
out_dir <- ('Z:/RC2/01_Sensor_Calibration_and_Correction_Files/01_Minidot.bucket/05_MiniDotCorrectionFactors/')
# ============================ read and format data ============================
minidot_files <- list.files(minidot_dir, recursive = T, full.names = T, pattern = '.txt')
minidot_files <- minidot_files[ !grepl('Archive',minidot_files)]
extech_data <- read_csv(extech_file) %>%
mutate(datetime = paste(Date, Time, sep = ' '))
extech_data$Date_Time <- paste(extech_data$Date, extech_data$Time, sep = ' ')
extech_data$Unix <- as.numeric(as.POSIXct(extech_data$Date_Time))
combine <- tibble(test_date = as.character(),
serial_number = as.character(),
mean_data_correction_factor = as.numeric(),
mean_data_offset_check = as.numeric())
for (minidot_file in minidot_files) {
minidot_ID <- unlist(str_split(minidot_file, '/')) [7]
minidot_data <- read_csv(minidot_file, skip = 2) %>%
arrange(`Time (sec)`) %>%
mutate(match_unixtime = as.POSIXct(`Time (sec)`,origin = "1970-01-01"),
match_unixtime = format(round(match_unixtime,units='mins'),format="%m/%d/%Y %H:%M:%S"),
DO_corrected = `DO (mg/l)`*0.99) #corrected for oversaturation of bubbler by 1%
end <- (as.numeric(nrow(minidot_data))) -1
minidot_start <- minidot_data$`Time (sec)`[1]
start_date <- unlist(str_split(minidot_data$match_unixtime [1], ' ')) [1]
minidot_end <- minidot_data$`Time (sec)`[end]
extech_filter <- extech_data %>%
filter(Unix >= minidot_start & Unix <= minidot_end)
extech_filter <- extech_filter%>%
mutate(match_unixtime = as.POSIXct(paste(Date, Time),format="%Y-%m-%d %H:%M:%S"),
match_unixtime = format(round(match_unixtime,units='mins'),format="%m/%d/%Y %H:%M:%S"))
data <- left_join(minidot_data, extech_filter, by = "match_unixtime") %>%
filter(!is.na(Position)) %>%
mutate(#u_atm = exp(11.8571 - (3840.70/(Ch2_Value+273.15))-(216961/(Ch2_Value+273.15)^2)), # Calculate the vapor pressure of water (u in atm) at each time step
# theta = 0.000975 - (1.426E-05 * Ch2_Value) + (6.436E-08*(Ch2_Value)^2), # Calculate theta
# Barometric_Pressure_in_atm = Ch3_Value * 0.000986923, # Calculate the pressure correction factor
# Fp = ((Barometric_Pressure_in_atm - u_atm)*(1-(theta*Barometric_Pressure_in_atm)))/ ((1- u_atm)*(1 - theta)),
# DOknot = exp(-139.34411 + (1.575701E5/(Ch2_Value+273.15)) - (6.642308E7/(Ch2_Value+273.15)^2) + (1.243800E10/(Ch2_Value+273.15)^3) - (8.621949E11/(Ch2_Value+273.15)^4)),# Calculate Maximum Theoretical Concentration
# DOsat = DOknot * Fp, # Correct DOknot for ambient atmospheric pressure
DOsat = calc_DO_sat(`T (deg C)`, Ch3_Value, model = "garcia-benson"),# Ch3 = BP in hpa which equivalent to mbar, T is water temp from minidot
correction_factor = DOsat/DO_corrected,
corrected_mgl=DO_corrected*mean(correction_factor),
offsetcheck = as.numeric(DOsat/corrected_mgl)
)
correction <- tibble(
test_date = start_date,
serial_number = minidot_ID,
mean_data_correction_factor = mean(data$correction_factor, na.rm = T),
mean_data_offset_check = round(mean(data$offsetcheck, na.rm = T), 2))
combine <- combine %>%
add_row(correction)
rm(correction)
}
combine <-  combine %>%
mutate(flag1 = case_when(mean_data_correction_factor >= 1.05 | mean_data_correction_factor <= 0.95 ~ 'Needs Calibration'),
flag2 = case_when(mean_data_offset_check != 1  ~ 'Offset check failed'),
flag = paste(flag1, flag2, sep = ' ')) %>%
select(-flag1, -flag2) %>%
arrange(serial_number)
combine$flag <- gsub('NA', '', as.character(combine$flag))
out_file <- paste(out_dir, 'minidot_correction_factors_', Sys.Date(), '.csv', sep = '')
write_csv(combine, out_file)
new_only <- combine %>%
mutate(test_date = mdy(test_date)) %>%
group_by(serial_number) %>%
slice_max(order_by = test_date) %>%
ungroup()
out_file_new <- paste(out_dir, 'minidot_correction_factors_MOST_RECENT_', Sys.Date(), '.csv', sep = '')
write_csv(new_only, out_file_new)
source("C:/Brieanne/GitHub/minidot_correction_factors/merge_extech.R", echo=TRUE)
source("C:/Brieanne/GitHub/minidot_correction_factors/minidot_correction_factor_BF.R", echo=TRUE)
library(tidyverse) #keep it tidy
library(raster) # work with rasters, NOTE: masks dplyr::select
library(janitor) # clean_names()
library(ggthemes) # theme_map()
library(ggsflabel) # add labels to sf objects
library(ggnewscale) # set multiple color scales
library(ggspatial) # add north arrow and scale bar
library(nhdplusTools) # get watershed boundary/flowlines
library(elevatr) # pull elevation maps
library(sf) # tidy spatial
library(spData)
library(cowplot)
library(rstudioapi)
library(viridis)
rm(list=ls(all=T))
# Setting wd to parent folder
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("./..")
# ================================= User inputs ================================
metadata_file <- './Published_Data/v2_RCSFA_Geospatial_Data_Package/v2_RCSFA_Geospatial_Site_Information.csv'
data_file <- './v2_SSS_Water_Sediment_Total_Respiration_GPP.csv'
shp_dir <- './Figures/Maps/YakimaRiverBasin_Boundary'
modelled_ER <- './v2_SSS_ER_d50_TotalOxygenConsumed.csv'
common_crs = 4326
# ============================== read in and merge =============================
metadata <- read_csv(metadata_file) %>%
dplyr::select(Site_ID, Latitude, Longitude)
data <- read_csv(data_file, comment = '#', na = '-9999') %>%
mutate(Total_Ecosystem_Respiration_Square = case_when(Total_Ecosystem_Respiration_Square > 0 ~ NA,
TRUE ~ Total_Ecosystem_Respiration_Square))
merge <- data %>%
left_join(metadata)
# ============================ read in YRB shp file ============================
YRB_shp <- list.files(shp_dir, 'shp', full.names = T)
YRB_boundary <- read_sf(YRB_shp) %>%
st_transform(common_crs)
# ============================ convert to sf object ============================
sites <- st_as_sf(merge, coords = c('Longitude','Latitude'), crs = common_crs)
# ======================== pull NHD data and elevation =========================
YRB_flowlines <- get_nhdplus(AOI = YRB_boundary$geometry, streamorder = 3)
elevation_raw <- get_elev_raster(YRB_boundary$geometry, z = 10)
elevation_crop <- mask(elevation_raw, YRB_boundary)
elevation <- as.data.frame(elevation_crop, xy = T) %>%
as_tibble() %>%
rename("long" = x,
"lat" = y,
"elevation" = 3) %>% #column index > name (changing resolution changes colname)
filter(!is.na(elevation))
merge_ER <-data %>%
full_join(read_csv(modelled_ER, comment = '#', na = '-9999')) %>%
left_join(metadata) %>%
arrange(Total_Ecosystem_Respiration_Square)
ER_sf <- merge_ER %>%
# filter(Total_Ecosystem_Respiration_Square <= 0) %>%
st_as_sf(coords = c('Longitude','Latitude'), crs = common_crs)
ER_tot_obs_map <- ggplot()+
geom_sf(data = YRB_boundary)+
geom_raster(data = elevation, aes(long, lat, fill = elevation), show.legend = F, alpha = 0.4)+
scale_fill_gradient(low = 'white', high = 'black')+
geom_sf(data = YRB_flowlines, color = "royalblue", alpha = 0.8)+
new_scale_fill()+
geom_sf(data = ER_sf, aes(color = Total_Ecosystem_Respiration_Square, size = Total_Ecosystem_Respiration_Square), show.legend = T) +
scale_fill_viridis(option = 'B', begin = 0.3)+
scale_color_viridis(option = 'B', begin = 0.3)+
scale_size(range = c(3, 8), trans = 'reverse')+
new_scale_color()+
geom_sf(data = ER_sf %>% filter(is.na(Total_Ecosystem_Respiration_Square)), aes(color = 'grey'), size = 2.5, show.legend = T) +
scale_color_manual(values = c("grey" = "grey60")) +
theme_map() +
labs(x = "", y = "", color = "Total Ecosystem\nRespiration\n(g O2 m2 day-1)") +
ggspatial::annotation_scale(
location = "br",
pad_x = unit(0.5, "in"),
bar_cols = c("black", "white")) +
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
pad_x = unit(2, "in"),
# pad_y = unit(0.5, "in"),
style = ggspatial::north_arrow_nautical(
fill = c("black", "white"),
line_col = "grey20"))
data_file
ggsave('./Figures/Maps/SSS_ER_Total_Observed_Map.pdf',
ER_tot_obs_map,
width = 10,
height = 5
)
