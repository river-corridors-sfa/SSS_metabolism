xvars[v]
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}else{
sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)[xvars[v]]
}
}
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}else{
sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
}
}
View(cdata)
v=1
xvars[v]
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
sdata[xvars[v]]
scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}else{
sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
}
}
intercept_only <- lm(ERsed_Square ~ 1, data=sdata)
#define model with all predictors
all <- lm(ERsed_Square ~ ., data = sdata)
forward <- step(intercept_only, direction='both', scope=formula(all), steps=5000,trace=1)
forward$anova
forward$coefficients
#  lm fitting using selected variables from forward stepwise selection
#ffit<- lm(ERsed_Square ~ totdasqkm+velocity_ms +AridityWs+Slope+ Minidot_Temperature, data = sdata)
ffit<- lm(ERsed_Square ~ Slope+ D50_m, data = sdata)
#ffit<- lm(ERsed_Square ~ AridityWs+ Minidot_Temperature, data = sdata)
summary(ffit)
forward$coefficients
#perform backward stepwise regression
backward <- step(all, direction='backward', scope=formula(all), trace=1)
backward$anova
backward$coefficients
#  lm fitting using selected variables from backward stepwise selection
bfit<- lm(ERsed_Square ~ Slope+D50_m+AridityWs, data = sdata)
#bfit<- lm(ERsed_Square ~ totdasqkm+velocity_ms+AridityWs+Minidot_Temperature, data = sdata)
#bfit<- lm(DO_Slope ~TN +TOT_BASIN_AREA+ T_mean+StreamOrde+Transformations, data = data)
summary(bfit)
#define intercept-only model
intercept_only <- lm(ERsed_Square ~ 1, data=sdata)
#define model with all predictors
all <- lm(ERsed_Square ~ ., data = sdata)
backward$coefficients
backward$anova
View(sdata)
sdata =cdata[cdata$ERsed_Square<=0,]
sdata =cdata[cdata$ERsed_Square<=0,]
View(sdata)
View(cdata)
cdata[cdata$ERsed_Square>0,]
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}
# else{
#   sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
# }
}
#define intercept-only model
intercept_only <- lm(ERsed_Square ~ 1, data=sdata)
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", #"Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}
# else{
#   sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
# }
}
#define intercept-only model
intercept_only <- lm(ERsed_Square ~ 1, data=sdata)
#define model with all predictors
all <- lm(ERsed_Square ~ ., data = sdata)
################################################################################################
#perform forward stepwise regression
forward <- step(intercept_only, direction='both', scope=formula(all), steps=5000,trace=1)
forward$anova
forward$coefficients
#  lm fitting using selected variables from forward stepwise selection
#ffit<- lm(ERsed_Square ~ totdasqkm+velocity_ms +AridityWs+Slope+ Minidot_Temperature, data = sdata)
ffit<- lm(ERsed_Square ~ Slope+ D50_m, data = sdata)
#ffit<- lm(ERsed_Square ~ AridityWs+ Minidot_Temperature, data = sdata)
summary(ffit)
#perform backward stepwise regression
backward <- step(all, direction='backward', scope=formula(all), trace=1)
backward$anova
backward$coefficients
plot(cdata$ERsed_Square,cdata$D50_m)
plot(cdata$ERsed_Square,log(cdata$D50_m))
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
xvars = c("HOBO_Temp","Slope","Velocity" ,"TSS", "Discharge","AridityWs",#'NPOC','TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'D50_m')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
##
#log transform variables
for ( v in 1:length(xvars)){
if(xvars[v] %in% c("totdasqkm",'TSS','Slope','D50_m')){
sdata[xvars[v]] <- log10(sdata[xvars[v]])
}else if(xvars[v] %in% c('PctCrop2019Ws')){
sdata[xvars[v]] <- log10(sdata[,xvars[v]]+1)
}
# else{
#   sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
# }
}
#define intercept-only model
intercept_only <- lm(ERsed_Square ~ 1, data=sdata)
#define model with all predictors
all <- lm(ERsed_Square ~ ., data = sdata)
################################################################################################
#perform forward stepwise regression
forward <- step(intercept_only, direction='both', scope=formula(all), steps=5000,trace=1)
forward$anova
forward$coefficients
#  lm fitting using selected variables from forward stepwise selection
#ffit<- lm(ERsed_Square ~ totdasqkm+velocity_ms +AridityWs+Slope+ Minidot_Temperature, data = sdata)
ffit<- lm(ERsed_Square ~ Slope+ D50_m, data = sdata)
#ffit<- lm(ERsed_Square ~ AridityWs+ Minidot_Temperature, data = sdata)
summary(ffit)
png(file.path(outdir,'ERsed',paste0('bestfit_regression_forward',".png")),
width = 6, height = 6, units = 'in', res = 600)
#perform backward stepwise regression
backward <- step(all, direction='backward', scope=formula(all), trace=1)
backward$anova
backward$coefficients
summary(all)
#  lm fitting using selected variables from backward stepwise selection
bfit<- lm(ERsed_Square ~ Slope+D50_m+AridityWs, data = sdata)
#bfit<- lm(ERsed_Square ~ totdasqkm+velocity_ms+AridityWs+Minidot_Temperature, data = sdata)
#bfit<- lm(DO_Slope ~TN +TOT_BASIN_AREA+ T_mean+StreamOrde+Transformations, data = data)
summary(bfit)
#ffit<- lm(ERsed_Square ~ AridityWs+ Minidot_Temperature, data = sdata)
summary(ffit)
png(file.path(outdir,'ERsed',paste0('crPlots_bfit_variables_3vars',".png")),
width = 8, height = 4, units = 'in', res = 600)
par(mfrow=c(1,3),mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
crPlots(bfit,~Slope,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(Slope)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~D50_m,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(D50_m)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~AridityWs,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("Aridityws"),
smooth=FALSE,id=FALSE)
dev.off()
png(file.path(outdir,'ERsed',paste0('crPlots_bfit_variables_3vars',".png")),
width = 4, height = 8, units = 'in', res = 600)
par(mfrow=c(3,1),mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
crPlots(bfit,~Slope,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(Slope)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~D50_m,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(D50_m)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~AridityWs,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("Aridityws"),
smooth=FALSE,id=FALSE)
dev.off()
png(file.path(outdir,'ERsed',paste0('crPlots_bfit_variables_3vars',".png")),
width = 3, height = 8, units = 'in', res = 600)
par(mfrow=c(3,1),mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
crPlots(bfit,~Slope,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(Slope)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~D50_m,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("log(D50_m)"),
smooth=FALSE,id=FALSE)
crPlots(bfit,~AridityWs,
ylab=expression(paste("Partial Residuals - ","ER"[sed]*" (g O"[2]*" m"^2*" day"^-1*")")),
xlab=expression("Aridityws"),
smooth=FALSE,id=FALSE)
dev.off()
################################################################################################
## random forest analysis
library("randomForest")
# sdata1 =sdata
#sdata1$ERsed_Square[sdata1$ERsed_Square>0] = 0
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
mtry <- tuneRF(sdata[,-1],sdata[,1], ntreeTry=500,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
set.seed(12)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,mtry=6, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
par(mgp=c(2,0.5,0),mar=c(12.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
narg<-c("Temperature","Slope" ,"Velocity" ,"Discharge","TSS", "Total_Drainage_Area",
"Pct_Forest","Pct_Crop","Aridity",'D50')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],names(vimp))
names(vimp)[idx]<-narg[v]
}
col.colors <- c(Temperature="#FF0000", TSS="#CCFF00", Velocity="#0066FF",
Total_Drainage_Area='#CC00FF',Slope='#FF0000',Discharge="#00FF66",
Pct_Forest='#CCFF00',Pct_Crop ='#00FF66',Aridity='#CC00FF',D50='#CCFF00')
order.names <- names(vimp)
order.colors <- col.colors[order.names] #rainbow(5)
barplot(vimp/sum(vimp),col =order.colors , horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
R2
set.seed(42)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,mtry=6, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,mtry=6, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
plot(cdata$Slope,cdata$D50_m)
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
mtry <- tuneRF(sdata[,-1],sdata[,1], ntreeTry=500,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
best.m
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,nPerm=3,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
?randomForest
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=10,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=5,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
set.seed(12)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=5,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(12)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=4,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=4,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=3,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(42)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=4,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(123)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=500,maxnodes=4,mtry=best.m, data=sdata, importance=TRUE) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
par(mgp=c(2,0.5,0),mar=c(12.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
narg<-c("Temperature","Slope" ,"Velocity" ,"Discharge","TSS", "Total_Drainage_Area",
"Pct_Forest","Pct_Crop","Aridity",'D50')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],names(vimp))
names(vimp)[idx]<-narg[v]
}
col.colors <- c(Temperature="#FF0000", TSS="#CCFF00", Velocity="#0066FF",
Total_Drainage_Area='#CC00FF',Slope='#FF0000',Discharge="#00FF66",
Pct_Forest='#CCFF00',Pct_Crop ='#00FF66',Aridity='#CC00FF',D50='#CCFF00')
order.names <- names(vimp)
order.colors <- col.colors[order.names] #rainbow(5)
barplot(vimp/sum(vimp),col =order.colors , horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
png(file.path(outdir,'ERsed',paste0('rf_importance_no_transform','.png')),
width = 8, height = 6, units = 'in', res = 600)
par(mgp=c(2,0.5,0),mar=c(12.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
narg<-c("Temperature","Slope" ,"Velocity" ,"Discharge","TSS", "Total_Drainage_Area",
"Pct_Forest","Pct_Crop","Aridity",'D50')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],names(vimp))
names(vimp)[idx]<-narg[v]
}
col.colors <- c(Temperature="#FF0000", TSS="#CCFF00", Velocity="#0066FF",
Total_Drainage_Area='#CC00FF',Slope='#FF0000',Discharge="#00FF66",
Pct_Forest='#CCFF00',Pct_Crop ='#00FF66',Aridity='#CC00FF',D50='#CCFF00')
order.names <- names(vimp)
order.colors <- col.colors[order.names] #rainbow(5)
barplot(vimp/sum(vimp),col =order.colors , horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
dev.off()
png(file.path(outdir,'ERsed',paste0('rf_importance_no_transform','.png')),
width = 8, height = 6, units = 'in', res = 600)
par(mgp=c(2,0.5,0),mar=c(12.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp
narg<-c("Temperature","Slope" ,"Velocity" ,"Discharge","TSS", "Total_Drainage_Area",
"Pct_Forest","Pct_Crop","Aridity",'D50')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],names(vimp))
names(vimp)[idx]<-narg[v]
}
col.colors <- c(Temperature='#CC00FF', TSS='#00FF66',Velocity="#0066FF",
Total_Drainage_Area="#FF0000",Slope='#FF0000',Discharge="#00FF66",
Pct_Forest='#CCFF00',Pct_Crop ="#CCFF00", Aridity='#CC00FF',D50='#CCFF00')
order.names <- names(vimp)
order.colors <- col.colors[order.names] #rainbow(5)
barplot(vimp/sum(vimp),col =order.colors , horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
dev.off()
R2
summary(rfit
)
summary(rf_fit )
R2
?cforest
R2
getTree(rf_fit, 1, labelVar=TRUE)
library(reprtree)
install.packages('reprtree')
plot(rf_fit)
library(dplyr)
library(ggraph)
library(igraph)
tree_func <- function(final_model,
tree_num) {
# get tree by index
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
# prepare data frame for graph
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
# convert to graph and delete the last node that we don't want to plot
graph <- graph_from_data_frame(graph_frame) %>%
delete_vertices("0")
# set node labels
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 2))
# plot
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
print(plot)
}
rf_fit$finalModel
rf_fit
reprtree:::plot.getTree(model)
library(reprtree)
# RC2 spatial study
# preparing data for ER_total, ER_water,ER_sed related analysis
# X Lin April 18 2023
################################################
# Read in data
################################################
rm(list=ls(all=TRUE))
