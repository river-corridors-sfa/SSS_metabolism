---
title: "FTICR_Monet_Processing"
author: "Alan Roebuck"
date: "2024-07-22"
output: html_document
---

```{r setup, include=FALSE}
library(purrr)
library(stringr)
library(tidyverse)
```

## R Markdown

```{r cars}
files <- list.files(pattern = "\\.csv$", full.names=TRUE)
```

## Create FTICR processing function
This function will read in FTICR data, extract relevant molecular information and sample data, and Calculate various molecular properties for each individual peak (AImod - Koch and Dittmar 2016; NOSC - de LaRowe et al., 2011 ) 

```{r pressure, echo=FALSE}
process_file <- function(file) {
  file_name <- str_remove(basename(file), "\\.csv$")
  read.csv(file) %>%
    select(m.z, Molecular.Formula, Heteroatom.Class, C, H, O, N, S, P, DBE, H.C, O.C, Peak.Height, Is.Isotopologue) %>%
    filter(Is.Isotopologue == 0) %>%
    select(-Is.Isotopologue)%>%
    rename(!!file_name := Peak.Height)%>%
    mutate(across(c("N","S","P"), ~replace_na(.,0)),
           Class = case_when(
             H.C >=1.55 & H.C <= 2.25 & O.C >= 0 & O.C <= 0.3 ~"Lipid",
             H.C >=0.7 & H.C <= 1.5 & O.C >= 0.05 & O.C <= 0.15 ~"Unsat Hydrocarbon",
             H.C >=1.45 & H.C <= 2 & O.C >= 0.3 & O.C <= 0.55 ~"Protein",
             H.C >=0.81 & H.C <= 1.45 & O.C >= 0.28 & O.C <= 0.65 ~"Lignin",
             H.C >=1.48 & H.C <= 2.15 & O.C >= 0.68 & O.C <= 1 ~"Carbohydrate",
             H.C >=1.34 & H.C <= 1.8 & O.C >= 0.54 & O.C <= 0.71 ~"Amino Sugar",
             H.C >=0.7 & H.C <= 1.3 & O.C >= 0.65 & O.C <= 1.05 ~"Tannin",
             H.C >=0.3 & H.C <= 0.81 & O.C >= 0.12 & O.C <= 0.7 ~"Cond Hydrocarbon",
             TRUE ~ "Other"),
           El_form = case_when(
             N > 0 & S == 0 & P == 0 ~ "CHON",
             N == 0 & S > 0 & P == 0 ~ "CHOS",
             N == 0 & S == 0 & P > 0 ~ "CHOP",
             N > 0 & S > 0 & P == 0 ~ "CHONS",
             N > 0 & S == 0 & P > 0 ~ "CHONP",
             N == 0 & S > 0 & P == 0 ~ "CHOSP",
             N > 0 & S > 0 & P == 0 ~ "CHONSP",
             TRUE ~ "CHO"),
           AImod_num = 1 + C - (0.5 * O) - S - (0.5 * (N + P + H)),
           AImod_denom = C - (0.5 * O) - S - N - P,
           AImod = ifelse(AImod_denom <= 0 | AImod_num <= 0, 0, round(AImod_num / AImod_denom, 4)),
           AImod = ifelse(is.na(AImod), 0, AImod),
           AImod = ifelse(is.na(AImod),0,AImod),
           AImod = ifelse(AImod == "Inf",0,AImod),
           AImod = ifelse(AImod == "-Inf",0,AImod),
          NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
           GFE = 60.3-(28.5*NOSC),
           H.C = round(H.C, 2),
           O.C = round(O.C, 2),
           )
}
```


## Run FTICR processing function
This code runs the above FTICR processing function and merges all samples into a single data frame
```{r}

# Process each file and store in a list
processed_files <- map(files, process_file)


# Merge all data frames by Molecular Formula, rearrange dataframe to include relevant FTICR information followed by sample data
merged_data <- reduce(processed_files[1:2], full_join, by = "Molecular.Formula")%>%
  mutate(across(ends_with(".x"), 
               ~ coalesce(., get(sub(".x$", ".y", cur_column()))),
               .names = "{sub('.x$', '', col)}")) %>%
  dplyr::select(-ends_with(".x"), -ends_with(".y"))

if(length(processed_files) > 2) { 
  for (i in 3:length(processed_files)) {
  merged_data <- full_join(merged_data, processed_files[[i]], by = "Molecular.Formula")%>%
    mutate(across(ends_with(".x"), 
               ~ coalesce(., get(sub(".x$", ".y", cur_column()))),
               .names = "{sub('.x$', '', col)}")) %>%
  dplyr::select(-ends_with(".x"), -ends_with(".y"))
  }
}

# Reorder merged data frame
merged_data <- merged_data %>%
  rename(Mass = m.z) %>%
  select(Mass, Molecular.Formula, Heteroatom.Class, El_form, Class, C:P, H.C,O.C,DBE,AImod:GFE, everything())

```


## Split FTICR data
This will split FTICR data into 2 data frames. 1 containing molecular properties identified for each peak within the whole dataset. The other data frame contains sample data. 

```{r}

ft_data <- merged_data %>%
  column_to_rownames("Molecular.Formula")%>%
  select(-c(Mass:GFE))%>%
  mutate(across(everything(), ~replace_na(., 0)),
         across(everything(), ~as.numeric(.>0))) #Convert Data to Presence-Absence

ft_mol <- merged_data %>%
  column_to_rownames("Molecular.Formula") %>%
  select(Mass:GFE)

rm(merged_data, processed_files, files, process_file)
```

## Calculate Sample Average Molecular Properties

```{r, warning=FALSE}


# Define a function to calculate intensity weighted means (If presence-absence, this will simply be average means)
# This function is for the following molecular properties: Mass, C, H, O, N, S, AImod, DBE, NOSC, O/C, H/C
calculate_weighted_means <- function(column, weights) {
  sum(column * weights) / sum(weights)
}

# Create dataframe with weighted FTICRMS molecular properties data
fticr_means <- ft_data %>%
  summarise(
#Calculate the mean for molecular properties using the function above. If using intensity based data, these will be intensity weighted. If using presence absence based data, these will simply be average means. 
    Mass = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$Mass, x)),
    C = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$C, x)),
    H = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$H, x)),
    O = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$O, x)),
    N = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$N, x)),
    S = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$S, x)),
    AImod = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$AImod, x)),
    DBE = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$DBE, x)),
    NOSC = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$NOSC, x)),
    OC = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$O.C, x)),
    HC = apply(ft_data, 2, function(x) calculate_weighted_means(ft_mol$H.C, x)),
#Calculate the elemental diversity - as in the percentage of formula identified as CHOX. These are not intensity weighted
    CHO_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$El_form == 'CHO'] !=0)*100/sum(x != 0)),
    CHON_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$El_form == 'CHON'] !=0)*100/sum(x != 0)),
    CHOS_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$El_form == 'CHOS'] !=0)*100/sum(x != 0)),
#Calculate the Compound class diversity - as in the percentage of formula identified as lipid, etc. These are not intensity   weighted
    Lipid_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Lipid'] !=0)*100 / sum(x)),
    UnsatHydrocarbon_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Unsat Hydrocarbon'] !=0)*100 / sum(x!=0)),
    Protein_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Protein'] !=0)*100 / sum(x!=0)),
    Lignin_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Lignin'] !=0)*100 / sum(x!=0)),
    Carbohydrate_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Carbohydrate'] !=0)*100 / sum(x!=0)),
    AminoSugar_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Amino Sugar'] !=0)*100 / sum(x!=0)),
    Tannin_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Tannin'] !=0)*100 / sum(x!=0)),
    CondHydrcarbon_percent = apply(ft_data, 2, function(x) sum(x[ft_mol$Class == 'Cond Hydrocarbon'] !=0)*100 / sum(x!=0))
  )%>%
  mutate(Sample = names(ft_data))%>%
  select(Sample, everything())

# Clean up workspace
rm(calculate_weighted_means)

```


## Save FTICR data

```{r}

write.csv(file = "Final_Data/ft_data.csv", ft_data, row.names = TRUE)
write.csv(file = "Final_Data/ft_mol.csv", ft_mol, row.names=TRUE)
write.csv(file = "Final_Data/ft_mol_properties.csv", fticr_means, row.names=FALSE)


```
