plot(lasso_cv)
optimal_lambda <- lasso_cv$lambda.min
#lasso
la.eq <- glmnet(Xs, ys, lambda=optimal_lambda, family='gaussian', intercept = F, alpha=1)
la.eq$beta
summary(la.eq)
la.eq$beta
hist(sqrt(sdata$PctMxFst2019Ws))
View(sdata)
cdata
library(segmented)
fit <- lm(ERsed_Square~GPP_Square, data=sdata)
segmented.fit <- segmented(fit, seg.Z = ~GPP_Square, psi=9,
control =seg.control(display = TRUE, maxit.glm=3))
summary(segmented.fit)
View(sdata)
sdata = cdata[c(yvar,xvars,'Site_ID')];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata0 <-cdata[c('GPP_Square','ERsed_Square','Site_ID')]
View(sdata0)
View(sdata0)
names(cdata)
sdata0 <-cdata[c('GPP_Square',"ERtotal_Square",'ERsed_Square','Site_ID')]
View(cdata)
View(sdata0)
##############################################################################################################
# read in data
cdata <- data_merge()
# remove positive ERsed
sdata =cdata[cdata$ERsed_Square<0,]
yvar ='ERsed_Square'
xvars0 = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN')
########################
#log transform all variables
ldata<- sdata[c(yvar,vars0)]
vars <-names(ldata)
########################
#log transform all variables
ldata<- sdata[c(yvar,xvars0)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]]))
}else if (vars[v] %in% c('hz_spring')){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("PctMxFst2019Ws",'PctCrop2019Ws',"Chlorophyll_A","GPP_Square")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
png(file.path(outdir,'ERsed','check_normality',paste0(vars[v],'_orig_vs_log',".png")),
width = 3, height = 4, units = 'in', res = 600)
par(mfrow=c(2,1),mgp=c(2,1,0),mar=c(3.4,3.4,1,1.5))
hist(sdata[,vars[v]],xlab=vars[v],main='')
hist(ldata[,vars[v]],xlab=paste0(vars[v],'_log'),main='')
dev.off()
# else{
#   sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
# }
}
hist(cdata$PctFst)
hist(cdata$PctAg)
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" ,"Discharge","TSS", 'TN','NPOC',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws',"AridityWs",
'D50_m',"hz_spring","Chlorophyll_A",'streamorde','GPP_Square') #"PctMxFst2019Ws","PctCrop2019Ws"
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]])+1)
}else if (vars[v] %in% c('hz_spring',"AridityWs","HOBO_Temp",'Velocity','streamorde',"PctFst")){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("Chlorophyll_A","GPP_Square")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
}
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]])+1)
}else if (vars[v] %in% c('hz_spring',"AridityWs","HOBO_Temp",'Velocity',"PctFst")){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("Chlorophyll_A","GPP_Square")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
}
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]])+1)
}else if (vars[v] %in% c('hz_spring',"AridityWs","HOBO_Temp",'Velocity',"PctFst")){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("Chlorophyll_A","GPP_Square")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
}
View(ldata)
########################
#log transform all variables
ldata<- sdata[c(yvar,xvars0)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]]))
}else if (vars[v] %in% c('hz_spring')){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("PctMxFst2019Ws",'PctCrop2019Ws',"PctFst","PctAg","Chlorophyll_A","GPP_Square")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
png(file.path(outdir,'ERsed','check_normality',paste0(vars[v],'_orig_vs_log',".png")),
width = 3, height = 4, units = 'in', res = 600)
par(mfrow=c(2,1),mgp=c(2,1,0),mar=c(3.4,3.4,1,1.5))
hist(sdata[,vars[v]],xlab=vars[v],main='')
hist(ldata[,vars[v]],xlab=paste0(vars[v],'_log'),main='')
dev.off()
# else{
#   sdata[xvars[v]] <- scale(sdata[xvars[v]], center = TRUE, scale = TRUE)
# }
}
cdata$PctMxFst2019Ws
cdata$PctFst
View(cdata)
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" ,"Discharge","TSS", 'TN','NPOC',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws',"AridityWs",
'D50_m',"hz_spring","Chlorophyll_A",'streamorde','GPP_Square') #"PctMxFst2019Ws","PctCrop2019Ws"
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]])+1)
}else if (vars[v] %in% c('hz_spring',"AridityWs","HOBO_Temp",'Velocity',"PctFst")){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("Chlorophyll_A","GPP_Square","PctAg")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
}
################################################################################################
#
xvars2 <- c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" ,"Discharge","TSS", 'NPOC',
"totdasqkm","PctFst",'PctShrb2019Ws',"AridityWs",
'D50_m',"hz_spring","Chlorophyll_A",'streamorde','GPP_Square')
library(glmnet)
lambdas_to_try <- 10^seq(-3, 7, length.out = 100)
set.seed(100)
Xs <-as.matrix(ldata[,xvars2])
ys <-as.matrix(ldata[,yvar])
lasso_cv <- cv.glmnet(xs, ys, alpha = 1, lambda = lambdas_to_try)
plot(lasso_cv)
optimal_lambda <- lasso_cv$lambda.min
#lasso
la.eq <- glmnet(Xs, ys, lambda=optimal_lambda, family='gaussian', intercept = F, alpha=1)
la.eq$beta
hist(cdata$PctFst)
#############################################################
#log transform variables
ldata<- sdata[c(yvar,xvars)]
vars <-names(ldata)
#log transform variables
for ( v in 1:length(vars)){
if(vars[v] %in% c("ERsed_Square")){
ldata[vars[v]] <- log10(abs(ldata[vars[v]])+1)
}else if (vars[v] %in% c('hz_spring',"AridityWs","HOBO_Temp",'Velocity',"PctFst")){
ldata[vars[v]] <- ldata[vars[v]]
}
else if(vars[v] %in% c("Chlorophyll_A","GPP_Square","PctAg")){
ldata[vars[v]] <- log10(ldata[,vars[v]]+1)
}else{
ldata[vars[v]] <- log10(ldata[vars[v]])
}
}
################################################################################################
#
xvars2 <- c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" ,"Discharge","TSS", 'NPOC',
"totdasqkm","PctFst",'PctShrb2019Ws',"AridityWs",
'D50_m',"hz_spring","Chlorophyll_A",'streamorde','GPP_Square')
library(glmnet)
lambdas_to_try <- 10^seq(-3, 7, length.out = 100)
set.seed(100)
Xs <-as.matrix(ldata[,xvars2])
ys <-as.matrix(ldata[,yvar])
lasso_cv <- cv.glmnet(xs, ys, alpha = 1, lambda = lambdas_to_try)
plot(lasso_cv)
optimal_lambda <- lasso_cv$lambda.min
#lasso
la.eq <- glmnet(Xs, ys, lambda=optimal_lambda, family='gaussian', intercept = F, alpha=1)
la.eq$beta
la.eq$nobs
la.eq$df
la.eq$a0
data_merge<-function(){
# read in ER data
sdata<-read.csv('./SSS_Ecosystem_Respiration_Data_Package/SSS_Water_Sediment_Total_Respiration.csv',skip=8)
#model data from kyongho's model
mdata<-read.csv('./SSS_Ecosystem_Respiration_Data_Package/SSS_ER_d50_TotalOxygenConsumed.csv',skip=4)
sdata<-merge(sdata,mdata,by= c('Parent_ID','Site_ID'))
sdata[sdata==-9999] = NA
names(sdata) <-c("Parent_ID","Site_ID","ERtotal_Square","ERtotal_Cubic","ERwc_Square",  "ERwc_Cubic",
"ERsed_Square", "ERsed_Cubic","D50_m","Total_Oxygen_Consumed")
# Slope, Discharge, Velocity from national hydrography dataset (NHD)
nhd_data<-read.csv('./SSS_Ecosystem_Respiration_Data_Package/Inputs/SSS_Slope_Discharge_Velocity.csv',skip=6)
# streamcat data
scat <-read.csv('./v2_RCSFA_Extracted_Geospatial_Data_2023-06-21.csv')
cols<-c('site',"totdasqkm","PctMxFst2019Ws","PctConif2019Ws","PctGrs2019Ws",'PctShrb2019Ws',
"PctCrop2019Ws","PctHay2019Ws","AridityWs",'streamorde')
scat <- scat[scat$site%in%sdata$Site_ID,grep(paste(cols, collapse = "|"),names(scat))]
names(scat)[1]<-'Site_ID'
#%Ag = %Crop + %Pasture/Hay
scat['PctAg']<-scat$PctCrop2019Ws+scat$PctHay2019Ws
#%Forest = %Coniferous+%Evergreen + %Mix
scat['PctFst']<-scat$PctConif2019Ws+scat$PctGrs2019Ws+scat$PctMxFst2019Ws
# # minidot temperature
# mdot <-read.csv('./SSS_Data_Package/miniDOT/Plots_and_Summary_Statistics/SSS_Water_DO_Temp_Summary.csv',skip=9)
# mdot <-mdot[,c(2:4)]; names(mdot)[3]<-"Minidot_Temp"
# HOBO temperature
hobo <-read.csv('./SSS_Data_Package/DepthHOBO/Plots_and_Summary_Statistics/SSS_Water_Press_Temp_Summary.csv',skip=7)
hobo <-hobo[,c(3:4)]; names(hobo)[2]<-"HOBO_Temp"
hobo$Site_ID[hobo$Site_ID=='S55'] ='S55N' ; hobo$Site_ID[hobo$Site_ID=='S56'] ='S56N'
# # average depth
# depth <- read.csv('./SSS_Data_Package/SSS_Water_Depth_Summary.csv',skip=8)
# depth <-depth[,c(1,5)]
## tss data
tss <-read.csv('./SSS_Data_Package/SSS_Water_TSS.csv',skip=2)
tss <- tss[grep('TSS',tss$Sample_Name),]
tss <-tss[,c(2,4)];
names(tss)<-c('Parent_ID','TSS')
tss$Parent_ID <-sapply(strsplit(as.character(tss$Parent_ID), "_"), `[`, 1)
tss$TSS <- as.numeric(tss$TSS)
# chemical data NPOC and TN
chemdata <- read.csv(file.path('./v2_CM_SSS_Data_Package','v2_CM_SSS_Water_NPOC_TN_Summary.csv'),skip=2)
chemdata <-chemdata[grep('SSS',chemdata$Sample_Name),]
chemdata <-chemdata[,c(2,4,5)];
names(chemdata)<-c('Parent_ID','NPOC','TN')
chemdata[chemdata=='-9999'] =NA
chemdata[c('NPOC','TN')] <- sapply(chemdata[c('NPOC','TN')],as.numeric)
chemdata$Parent_ID <-sapply(strsplit(as.character(chemdata$Parent_ID), "_"), `[`, 1)
#Chlorophyll_A
chla <-read.csv('./SSS_Data_Package/MantaRiver/Plots_and_Summary_Statistics/SSS_Water_Temp_SpC_Turb_pH_ChlA_Summary.csv',skip=15)
chla <-chla[,c(2,12)]; names(chla)[2]<-"Chlorophyll_A"
## GPP
gpp<-read.csv('./SSS_Ecosystem_Respiration_Data_Package/Outputs/SSS_combined_SM_results.csv')
gpp<- gpp[,c(1,5,7)]
names(gpp)[2:3] <-c('GPP_Square','Mean_Depth')
#Hyporheic exchange flux
aflux<-readRDS(file='nhd_CR_stream_annual_resp_inputs_outputs.rda')[c('COMID','logq_hz_total_m_s')]
names(aflux)<-c('COMID','hz_annual')
sflux<-readRDS(file='nhd_CR_stream_spring_resp_inputs_outputs.rda')[c('COMID','logq_hz_total_m_s')]
names(sflux)<-c('COMID','hz_spring')
wflux<-readRDS(file='nhd_CR_stream_summer_resp_inputs_outputs.rda')[c('COMID','logq_hz_total_m_s')]
names(wflux)<-c('COMID','hz_winter')
#fluxs <- Reduce(function(x, y) merge(x, y,by ='COMID',all =TRUE), list(aflux,sflux,wflux))
gspatial<- read.csv('./v2_RCSFA_Geospatial_Data_Package/v2_RCSFA_Geospatial_Site_Information.csv')[c('COMID','Site_ID')]
gdata<- gspatial[gspatial$Site_ID%in%sdata$Site_ID,]
gdata <- Reduce(function(x, y) merge(x, y,by ='COMID',all.x =TRUE), list(gdata,aflux,sflux,wflux))
gdata <- gdata[c("Site_ID","hz_annual", "hz_spring", "hz_winter")]
## merge the data
cdata <- Reduce(function(x, y) merge(x, y,by ='Parent_ID',all =TRUE), list(sdata,tss,chemdata,gpp,chla))
cdata <- Reduce(function(x, y) merge(x, y,by ='Site_ID',all.x =TRUE), list(cdata,scat,hobo,nhd_data,gdata))
return(cdata)
}
# RC2 spatial study - Multiple linear regression
# ER_sed
# X Lin April 18 2023
################################################################################################
# Read in data
################################################################################################
rm(list=ls(all=TRUE))
source('./COde/SSS_Sed_Resp_data_merging.R')
outdir<-'./MLR_Analysis_Figures'
##############################################################################################################
# read in data
cdata <- data_merge()
##############################################################################################################
# read in data
cdata <- data_merge()
# remove positive ERsed
sdata =cdata[cdata$ERsed_Square<0,]
yvar ='ERsed_Square'
# remove positive ERsed
sdata =cdata[cdata$ERsed_Square<0,]
yvar ='ERsed_Square'
xvars0 = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN')
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
# xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
#           "totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
#           "hz_spring","Chlorophyll_A",'streamorde','GPP_Square')
## %Ag(PctAg) = %Crop + %Pasture/Hay;   #%Forest(PctFst) = %Coniferous+%Evergreen + %Mix
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','Ratio')
sdata = cdata[c(yvar,xvars,'Site_ID')];#
sdata =sdata[sdata$ERsed_Square<=0,]
cdata['Ratio'] <- cdata$Mean_Depth/cdata$D50_m
cdata$TN[is.na(cdata$TN)]<-min(cdata$TN,na.rm=TRUE)/2
# remove positive ERsed
sdata =cdata[cdata$ERsed_Square<=0,]
sapply(cdata, function(x) sum(is.na(x)))
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
# xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
#           "totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
#           "hz_spring","Chlorophyll_A",'streamorde','GPP_Square')
## %Ag(PctAg) = %Crop + %Pasture/Hay;   #%Forest(PctFst) = %Coniferous+%Evergreen + %Mix
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','Ratio')
sdata = cdata[c(yvar,xvars,'Site_ID')];#
sdata =sdata[sdata$ERsed_Square<=0,]
#############################################################
#plotting the segments
library(segmented)
fit <- lm(ERsed_Square~GPP_Square, data=sdata)
segmented.fit <- segmented(fit, seg.Z = ~GPP_Square, psi=9,
control =seg.control(display = TRUE, maxit.glm=3))
summary(segmented.fit)
par(mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
#plot original data
plot(sdata$GPP_Square,sdata$ERsed_Square, pch=16, col='black',
xlab=expression(paste("GPP (g O"[2]*" m"^-2*" day"^-1*")")),ylab=expression(paste("ER"[sed]*" (g O"[2]*" m"^-2*" day"^-1*")")))
abline(v=11.8,lty=2)
#add segmented regression model
plot(segmented.fit, add=T)
View(sdata)
#sdata0 <-cdata[c('GPP_Square',"ERtotal_Square",'ERsed_Square','Site_ID')]
################################################################################################
## random forest analysis
################################################################################################
# sdata1 =sdata
#sdata1$ERsed_Square[sdata1$ERsed_Square>0] = 0
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN')
#
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN','Ratio')
sdata = cdata[c(yvar,xvars)];#
#sdata$TN[is.na(sdata$TN)]<-min(sdata$TN,na.rm=TRUE)/2
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
names(sdata)[-1]<-c("Temperature",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"Drainage_Area","PctMxFst","PctCrop",'PctShrb','D50',
"Hflux","ChlA",'streamorde','GPP','TN')
fit <- lm(ERsed_Square~GPP_Square, data=sdata)
segmented.fit <- segmented(fit, seg.Z = ~GPP_Square, psi=9,
control =seg.control(display = TRUE, maxit.glm=3))
summary(segmented.fit)
par(mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
#plot original data
plot(sdata$GPP_Square,sdata$ERsed_Square, pch=16, col='black',
xlab=expression(paste("GPP (g O"[2]*" m"^-2*" day"^-1*")")),ylab=expression(paste("ER"[sed]*" (g O"[2]*" m"^-2*" day"^-1*")")))
abline(v=11.8,lty=2)
#add segmented regression model
plot(segmented.fit, add=T)
#sdata0 <-cdata[c('GPP_Square',"ERtotal_Square",'ERsed_Square','Site_ID')]
################################################################################################
## random forest analysis
################################################################################################
# sdata1 =sdata
#sdata1$ERsed_Square[sdata1$ERsed_Square>0] = 0
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN')
#
# xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
#           "totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
#           "hz_spring","Chlorophyll_A",'streamorde','GPP_Square','TN','Ratio')
sdata = cdata[c(yvar,xvars)];#
#sdata$TN[is.na(sdata$TN)]<-min(sdata$TN,na.rm=TRUE)/2
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
names(sdata)[-1]<-c("Temperature",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',
"Drainage_Area","PctMxFst","PctCrop",'PctShrb','D50',
"Hflux","ChlA",'streamorde','GPP','TN')
palettes <- c(brewer.pal(9,name = 'Set1'),brewer.pal(length(xvars)-9,name = 'Set3'))
colors<-data.frame(color = palettes, xvars=names(sdata)[-1])
colors$xlabel <-names(sdata)[-1]
mtry <- tuneRF(sdata[,-1],sdata[,1], ntreeTry=1000,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
####################################################################################
##  full data and all variables
set.seed(11)  #set.seed(42)
# rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5,#nPerm=5, #maxnodes=6,nPerm=5,
#                        mtry=9, data=sdata, importance=TRUE, do.trace=100) #
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5,nPerm=5, #maxnodes=6,#nPerm=5,
mtry=9, data=sdata, importance=TRUE, do.trace=100) #
predicted <- unname(predict(rf_fit, data=sdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
plot(sdata$ERsed_Square,predicted)
par(mgp=c(2,0.5,0),mar=c(6.8,3.1,2.1,0.5))
#rimp <- importance(rf_fit)
#vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<-data.frame(vimp=as.data.frame(rf_fit$importance)$IncNodePurity,
xvars=row.names(as.data.frame(rf_fit$importance)))
vimp<- Reduce(function(x, y) merge(x, y,by ='xvars',all.x =TRUE), list(vimp,colors))
#vimp<- sort(vimp,decreasing = TRUE)
vimp<-vimp[order(vimp$vimp,decreasing = TRUE),]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$xlabel,
horiz = FALSE,las=3,cex.lab=1.3, cex.axis=1.1, ylim=c(0,0.2),
cex.main=2,cex.names=1.1,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
dev.off()
par(mgp=c(2,0.5,0),mar=c(6.8,3.1,2.1,0.5))
#rimp <- importance(rf_fit)
#vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<-data.frame(vimp=as.data.frame(rf_fit$importance)$IncNodePurity,
xvars=row.names(as.data.frame(rf_fit$importance)))
vimp<- Reduce(function(x, y) merge(x, y,by ='xvars',all.x =TRUE), list(vimp,colors))
#vimp<- sort(vimp,decreasing = TRUE)
vimp<-vimp[order(vimp$vimp,decreasing = TRUE),]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$xlabel,
horiz = FALSE,las=3,cex.lab=1.3, cex.axis=1.1, ylim=c(0,0.2),
cex.main=2,cex.names=1.1,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
##############################################################################################################
# read in data
cdata <- data_merge()
# add a coloumn 'ratio'
cdata['Ratio'] <- cdata$Mean_Depth/cdata$D50_m
cdata$TN[is.na(cdata$TN)]<-min(cdata$TN,na.rm=TRUE)/2
# remove positive ERsed
sdata =cdata[cdata$ERsed_Square<=0,]
sapply(cdata, function(x) sum(is.na(x)))
View(cdata)
View(sdata)
################################################################################################
# Stepwise Regression for ERsed
# fit <- lm(DO_Slope ~ DIC + NPOC + TN + TSS+T_mean+TOT_BASIN_AREA+StreamOrde, data = na.omit(cdata))
# step <- stepAIC(fit, direction="both")
# step$anova # display results
yvar ='ERsed_Square'
# xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
#           "totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
#           "hz_spring","Chlorophyll_A",'streamorde','GPP_Square')
## %Ag(PctAg) = %Crop + %Pasture/Hay;   #%Forest(PctFst) = %Coniferous+%Evergreen + %Mix
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC','TN',
"totdasqkm","PctFst","PctAg",'PctShrb2019Ws','D50_m',
"hz_spring","Chlorophyll_A",'streamorde','GPP_Square','Ratio')
sdata = cdata[c(yvar,xvars,'Site_ID')];#
sdata =sdata[sdata$ERsed_Square<=0,]
library(segmented)
fit <- lm(ERsed_Square~GPP_Square, data=sdata)
segmented.fit <- segmented(fit, seg.Z = ~GPP_Square, psi=9,
control =seg.control(display = TRUE, maxit.glm=3))
summary(segmented.fit)
png(file.path(outdir,'ERsed',paste0('segmented_regression_GPP',".png")),
width = 5, height = 4, units = 'in', res = 600)
par(mgp=c(2.2,1,0),mar=c(3.1,4.1,2,1.5))
#plot original data
plot(sdata$GPP_Square,sdata$ERsed_Square, pch=16, col='black',
xlab=expression(paste("GPP (g O"[2]*" m"^-2*" day"^-1*")")),ylab=expression(paste("ER"[sed]*" (g O"[2]*" m"^-2*" day"^-1*")")))
abline(v=11.8,lty=2)
#add segmented regression model
plot(segmented.fit, add=T)
dev.off()
hist(sdata$ERsed_Square)
