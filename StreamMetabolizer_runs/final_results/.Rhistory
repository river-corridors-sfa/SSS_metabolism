tt<- as.integer(format(dat$timeUTC, "%s"))
DO<-dat$Dissolved_Oxygen
DObasis361 = create.fourier.basis(rangeval = range(tt),nbasis = 361)
DOfourier361.fd = smooth.basis(argvals = tt, y = DO,fdParobj = DObasis361)$fd
DO361 = eval.fd(tt,DOfourier361.fd)
DOdo = setNames(data.frame(tt,dat$DateTime,DO,DO361),c("unixtime","Date_Time_PST","DO","Fourier361"))
DOdo$pcterror=100*abs(DOdo$DO-DOdo$Fourier361)/DO
DOdo$error_reduced<-DOdo$DO
threshold=1
DOdo$error_reduced[DOdo$pcterror>threshold]<-DOdo$Fourier361[DOdo$pcterror>threshold]
dat$Dissolved_Oxygen<-DOdo$error_reduced
detach("package:fda", unload=TRUE)
#DOWNSAMPLE
samplingmins=15
dat = dat[seq(1, nrow(dat), samplingmins), ]
#colnames(dat)[10]="Unix.Timestamp"
#dat$timeUTC<-as_datetime(dat$Unix.Timestamp)
#data is always collected in pacific-standard-time, so conversion to UTC is +8 hours
dat$solar.time<-convert_UTC_to_solartime(dat$timeUTC, longitude= dat$Longitude[1], time.type="mean solar")
#----------------------------------
#dat$timeUTC<-as.POSIXct(format(dat$timeUTC, tz = "UTC"), tz = "UTC")
#dat$DATE_TIME = as.POSIXct(dat$DATE_TIME, format = "%Y-%m-%d %H:%M:%S", tz="Etc/GMT+8")
# Transform date time into solar time
#dat$solar.time<-convert_UTC_to_solartime(dat$timeUTC, longitude= dat$Longitude[1], time.type="mean solar") #----------------------------------
# Longitude is from your field site
# Calculate in mg/L for much DO you would have in the water at the current saturation conditions
#      dat$DOsat_mg_per_L =(dat$Dissolved.Oxygen*100)/dat$Dosat_pct #can put calibration offset factor in here
#dat$Dissolved.Oxygen<-dat$Dissolved.Oxygen*1.018951498 #-----------------------------------------------------------------------
# Reducing the number of decimals after performing the saturation calculations
#  dat$Dosat_mg_per_L = round(dat$DOsat_mg_per_L,2)
dat$light<- calc_light(dat$solar.time, latitude=dat$Latitude[1], longitude=dat$Longitude[1], max.PAR =2300, attach.units = F) #------------------
dat$DO.sat=osat(dat$Temperature,dat$Pressure)
# Selecting the data types that are needed for stream metabolizer and changing header names. Running the model with K600_pooling = normal does not require discharge input
temp = dat
dat = cbind.data.frame(temp$solar.time,temp$Dissolved_Oxygen,temp$DO.sat,temp$Temperature,temp$light,temp$Depth)
colnames(dat) = c("solar.time","DO.obs","DO.sat","temp.water","light","depth")
parallel::detectCores()
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
knitr::opts_chunk$set
#knitr::opts_chunk$set(eval = FALSE)
#PARENT_ID=params$PARENT_ID
#SITE_ID=params$SITE_ID
#install.packages(remotes); library(remotes)
# remotes::install_github('appling/unitted', force = TRUE)
# remotes::install_github("USGS-R/streamMetabolizer", force = TRUE)
#install.packages("rstan", dependencies = FALSE)
#install.packages(devtools)
# If you have trouble installing rstan, try the installation codes below:
#devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", force = TRUE)
#install.packages("rstan", type = "source")
# Run the line below if you have trouble installing devtools
#devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
#rm(list=ls(all=T))
library(fda)
library(streamMetabolizer)
library(dplyr)
library(unitted)
library(ggplot2)
library(tidyr)
library(devtools)
library(rstan)
library(lubridate)
# Correctly installing rstan can be problematic, see GitHub for issues
#-------------------------------------
#PARENT_ID='' #this is where you would specify a site if you were not running this as a loop
#-------------------------------------
print("PARENT_ID: ")
PARENT_ID<-'SSS004'
print("SITE_ID: ")
SITE_ID<-'S55'
osat<- function(temp, bp) {
tstd<-log((298.15-temp) / (273.15 + temp))
a0<-2.00907
a1<-3.22014
a2<-4.0501
a3<-4.94457
a4<- -0.256847
a5<- 3.88767
u<-10^(8.10765-(1750.286/(235+temp)))
sato<-(exp(a0 + a1*tstd + a2*tstd^2 + a3*tstd^3 + a4*tstd^4+a5*tstd^5))*((bp-u)/(760-u))*1.42905
sato
}
####function returns mm of Hg - not using because we have logged time-series BP
#bpcalc<- function(bpst, alt) {
#  bpst*25.4*exp((-9.80665*0.0289644*alt)/(8.31447*(273.15+15)))
#}
#bp<-bpcalc(29.9, 489/3.28)# elevation at satus (alt in meters) #---------------------------------------------------------------------
data.path = "C:/Users/kauf093/OneDrive - PNNL/Spatial Study 2022/SSS_Data_Processing/5 - Publish_Ready_StreamMetabolizer_Input/" #----------------
#----------------
setwd(data.path)
dat = read.csv(paste(PARENT_ID,"_Temp_DO_Press_Depth.csv",sep=''),header=T,skip=8)
data.path="C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/"
setwd(data.path)
K600estimates=read.csv('SSS_k600.csv',header=T,skip=3)
K600estimate<-K600estimates[K600estimates$Site_ID==SITE_ID,2]
print("k600 estimate: ")
K600estimate
output.path="C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/"
#---------------------------------------------------------------------------------------------
file.name = paste('SSS_SM_',PARENT_ID,'_',SITE_ID,'_final',sep='')
#dat = na.omit(dat)
#dat=dat[450:33311-300,] #-------------------------------------------------------------------------------------------------------------
# Change date time format
#fix erroneous data by removing and replacing with fourrier-smoothed interpolation
dat$timeUTC<-as.POSIXct(dat$DateTime)+hours(8)
dat$timeUTC<-force_tz(dat$timeUTC,tzone='UTC')
tt<- as.integer(format(dat$timeUTC, "%s"))
DO<-dat$Dissolved_Oxygen
DObasis361 = create.fourier.basis(rangeval = range(tt),nbasis = 361)
DOfourier361.fd = smooth.basis(argvals = tt, y = DO,fdParobj = DObasis361)$fd
DO361 = eval.fd(tt,DOfourier361.fd)
DOdo = setNames(data.frame(tt,dat$DateTime,DO,DO361),c("unixtime","Date_Time_PST","DO","Fourier361"))
DOdo$pcterror=100*abs(DOdo$DO-DOdo$Fourier361)/DO
DOdo$error_reduced<-DOdo$DO
threshold=1
DOdo$error_reduced[DOdo$pcterror>threshold]<-DOdo$Fourier361[DOdo$pcterror>threshold]
dat$Dissolved_Oxygen<-DOdo$error_reduced
detach("package:fda", unload=TRUE)
detach("package:streamMetabolizer", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:unitted", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
knitr::opts_chunk$set
#knitr::opts_chunk$set(eval = FALSE)
#PARENT_ID=params$PARENT_ID
#SITE_ID=params$SITE_ID
#install.packages(remotes); library(remotes)
# remotes::install_github('appling/unitted', force = TRUE)
# remotes::install_github("USGS-R/streamMetabolizer", force = TRUE)
#install.packages("rstan", dependencies = FALSE)
#install.packages(devtools)
# If you have trouble installing rstan, try the installation codes below:
#devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", force = TRUE)
#install.packages("rstan", type = "source")
# Run the line below if you have trouble installing devtools
#devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
#rm(list=ls(all=T))
library(fda)
library(streamMetabolizer)
library(dplyr)
library(unitted)
library(ggplot2)
library(tidyr)
library(devtools)
library(rstan)
library(lubridate)
# Correctly installing rstan can be problematic, see GitHub for issues
#-------------------------------------
#PARENT_ID='' #this is where you would specify a site if you were not running this as a loop
#-------------------------------------
print("PARENT_ID: ")
PARENT_ID<-'SSS004'
print("SITE_ID: ")
SITE_ID<-'S55'
osat<- function(temp, bp) {
tstd<-log((298.15-temp) / (273.15 + temp))
a0<-2.00907
a1<-3.22014
a2<-4.0501
a3<-4.94457
a4<- -0.256847
a5<- 3.88767
u<-10^(8.10765-(1750.286/(235+temp)))
sato<-(exp(a0 + a1*tstd + a2*tstd^2 + a3*tstd^3 + a4*tstd^4+a5*tstd^5))*((bp-u)/(760-u))*1.42905
sato
}
####function returns mm of Hg - not using because we have logged time-series BP
#bpcalc<- function(bpst, alt) {
#  bpst*25.4*exp((-9.80665*0.0289644*alt)/(8.31447*(273.15+15)))
#}
#bp<-bpcalc(29.9, 489/3.28)# elevation at satus (alt in meters) #---------------------------------------------------------------------
data.path = "C:/Users/kauf093/OneDrive - PNNL/Spatial Study 2022/SSS_Data_Processing/5 - Publish_Ready_StreamMetabolizer_Input/" #----------------
#----------------
setwd(data.path)
dat = read.csv(paste(PARENT_ID,"_Temp_DO_Press_Depth.csv",sep=''),header=T,skip=8)
data.path="C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/"
setwd(data.path)
K600estimates=read.csv('SSS_k600.csv',header=T,skip=3)
K600estimate<-K600estimates[K600estimates$Site_ID==SITE_ID,2]
print("k600 estimate: ")
K600estimate
output.path="C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/"
#---------------------------------------------------------------------------------------------
file.name = paste('SSS_SM_',PARENT_ID,'_',SITE_ID,'_final',sep='')
#dat = na.omit(dat)
#dat=dat[450:33311-300,] #-------------------------------------------------------------------------------------------------------------
# Change date time format
#fix erroneous data by removing and replacing with fourrier-smoothed interpolation
dat$timeUTC<-as.POSIXct(dat$DateTime)+hours(8)
dat$timeUTC<-force_tz(dat$timeUTC,tzone='UTC')
tt<- as.integer(format(dat$timeUTC, "%s"))
DO<-dat$Dissolved_Oxygen
DObasis361 = create.fourier.basis(rangeval = range(tt),nbasis = 361)
DOfourier361.fd = smooth.basis(argvals = tt, y = DO,fdParobj = DObasis361)$fd
DO361 = eval.fd(tt,DOfourier361.fd)
DOdo = setNames(data.frame(tt,dat$DateTime,DO,DO361),c("unixtime","Date_Time_PST","DO","Fourier361"))
DOdo$pcterror=100*abs(DOdo$DO-DOdo$Fourier361)/DO
DOdo$error_reduced<-DOdo$DO
threshold=1
DOdo$error_reduced[DOdo$pcterror>threshold]<-DOdo$Fourier361[DOdo$pcterror>threshold]
dat$Dissolved_Oxygen<-DOdo$error_reduced
detach("package:fda", unload=TRUE)
detach("package:streamMetabolizer", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:unitted", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:devtools", unload=TRUE)
detach("package:rstan", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:lubridate", unload=TRUE)
library(streamMetabolizer)
library(dplyr)
library(unitted)
library(ggplot2)
library(tidyr)
library(devtools)
library(rstan)
library(lubridate)
#DOWNSAMPLE
samplingmins=15
dat = dat[seq(1, nrow(dat), samplingmins), ]
#colnames(dat)[10]="Unix.Timestamp"
#dat$timeUTC<-as_datetime(dat$Unix.Timestamp)
#data is always collected in pacific-standard-time, so conversion to UTC is +8 hours
dat$solar.time<-convert_UTC_to_solartime(dat$timeUTC, longitude= dat$Longitude[1], time.type="mean solar")
#----------------------------------
#dat$timeUTC<-as.POSIXct(format(dat$timeUTC, tz = "UTC"), tz = "UTC")
#dat$DATE_TIME = as.POSIXct(dat$DATE_TIME, format = "%Y-%m-%d %H:%M:%S", tz="Etc/GMT+8")
# Transform date time into solar time
#dat$solar.time<-convert_UTC_to_solartime(dat$timeUTC, longitude= dat$Longitude[1], time.type="mean solar") #----------------------------------
# Longitude is from your field site
# Calculate in mg/L for much DO you would have in the water at the current saturation conditions
#      dat$DOsat_mg_per_L =(dat$Dissolved.Oxygen*100)/dat$Dosat_pct #can put calibration offset factor in here
#dat$Dissolved.Oxygen<-dat$Dissolved.Oxygen*1.018951498 #-----------------------------------------------------------------------
# Reducing the number of decimals after performing the saturation calculations
#  dat$Dosat_mg_per_L = round(dat$DOsat_mg_per_L,2)
dat$light<- calc_light(dat$solar.time, latitude=dat$Latitude[1], longitude=dat$Longitude[1], max.PAR =2300, attach.units = F) #------------------
dat$DO.sat=osat(dat$Temperature,dat$Pressure)
# Selecting the data types that are needed for stream metabolizer and changing header names. Running the model with K600_pooling = normal does not require discharge input
temp = dat
dat = cbind.data.frame(temp$solar.time,temp$Dissolved_Oxygen,temp$DO.sat,temp$Temperature,temp$light,temp$Depth)
colnames(dat) = c("solar.time","DO.obs","DO.sat","temp.water","light","depth")
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels = c(temp.water='water temp\n(deg C)', light='PAR\n(umol m^-2 s^-1)')
dat %>% unitted::v() %>%
select(solar.time, temp.water, light) %>%
gather(type, value, temp.water, light) %>%
mutate(
type=ordered(type, levels=c('temp.water','light')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels = c(temp.water='water temp\n(deg C)', depth='water depth')
dat %>% unitted::v() %>%
select(solar.time, temp.water, depth) %>%
gather(type, value, temp.water, depth) %>%
mutate(
type=ordered(type, levels=c('temp.water','depth')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
knitr::opts_chunk$set(echo = TRUE)
folder<-'C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/'
filenamelist<-list.files(folder, pattern='daily_prediction_results')
SITE_IDlist<-sapply(strsplit(filenamelist, "_"), "[", 2)
PARENT_IDlist<-sapply(strsplit(filenamelist, "_"), "[", 1)
depthfolder<-'C:/Users/kauf093/OneDrive - PNNL/Spatial Study 2022/SSS_Data_Processing/5 - Publish_Ready_StreamMetabolizer_Input/'
depthfilenamelist<-list.files(depthfolder, pattern='csv')
depthPARENT_IDlist<-sapply(strsplit(depthfilenamelist, "_"), "[", 1)
#create output dataframe
SMresults <- data.frame(matrix(ncol = 11, nrow = 0))
colnames(SMresults) <- c("Parent_ID","Site_ID", "daysofdata", "ERdailymeanmean_gO2/m2day", "GPPdailymeanmean_gO2/m2day", "K600dailymeanmean_m/day","mean_depth_m","ERdailymeanmean_gO2/m3day","GPPdailymeanmean_gO2/m3day","K600vsERrsq","K600vsERp")
#start loop
for(i in 1:length(PARENT_IDlist)) {
#for(i in 1) {
data = read.csv(paste(folder,filenamelist[i],sep=''),header=T)
numdays<-length(data$ER_daily_mean[!is.na(data$ER_daily_mean)])
ERdailymeanmean<-mean(data$ER_daily_mean[!is.na(data$ER_daily_mean)])
GPPdailymeanmean<-mean(data$GPP_daily_mean[!is.na(data$GPP_daily_mean)])
K600dailymeanmean<-mean(data$K600_daily_mean[!is.na(data$K600_daily_mean)])
depthfilenumber<-which(depthPARENT_IDlist == PARENT_IDlist[i])
depthdata<-read.csv(paste(depthfolder,depthfilenamelist[depthfilenumber],sep=''),header=T,skip=8)
meandepthm<-mean(depthdata$Depth,na.rm=TRUE)
ERdailymeanmeanm3<-ERdailymeanmean/meandepthm
GPPdailymeanmeanm3<-GPPdailymeanmean/meandepthm
lmK600ER = lm(ER_daily_mean~K600_daily_mean, data = data) #Create the linear regression
K600vsERp=summary(lmK600ER)$coefficients[2,4]
K600vsERrsq=summary(lmK600ER)$r.squared
SMresults[nrow(SMresults) + 1,] = c(PARENT_IDlist[i],SITE_IDlist[i], numdays,ERdailymeanmean,GPPdailymeanmean,K600dailymeanmean,meandepthm,ERdailymeanmeanm3,GPPdailymeanmeanm3,K600vsERrsq,K600vsERp)
}
SMresults
write.csv(SMresults, paste(folder,"combined_results_no_special_cases.csv",sep=""), row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
folder<-'C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/'
filenamelist<-list.files(folder, pattern='daily_prediction_results')
SITE_IDlist<-sapply(strsplit(filenamelist, "_"), "[", 2)
PARENT_IDlist<-sapply(strsplit(filenamelist, "_"), "[", 1)
depthfolder<-'C:/Users/kauf093/OneDrive - PNNL/Spatial Study 2022/SSS_Data_Processing/5 - Publish_Ready_StreamMetabolizer_Input/'
depthfilenamelist<-list.files(depthfolder, pattern='csv')
depthPARENT_IDlist<-sapply(strsplit(depthfilenamelist, "_"), "[", 1)
#create output dataframe
SMresults <- data.frame(matrix(ncol = 11, nrow = 0))
colnames(SMresults) <- c("Parent_ID","Site_ID", "daysofdata", "ERdailymeanmean_gO2/m2day", "GPPdailymeanmean_gO2/m2day", "K600dailymeanmean_m/day","mean_depth_m","ERdailymeanmean_gO2/m3day","GPPdailymeanmean_gO2/m3day","K600vsERrsq","K600vsERp")
#start loop
for(i in 1:length(PARENT_IDlist)) {
#for(i in 1) {
data = read.csv(paste(folder,filenamelist[i],sep=''),header=T)
numdays<-length(data$ER_daily_mean[!is.na(data$ER_daily_mean)])
ERdailymeanmean<-mean(data$ER_daily_mean[!is.na(data$ER_daily_mean)])
GPPdailymeanmean<-mean(data$GPP_daily_mean[!is.na(data$GPP_daily_mean)])
K600dailymeanmean<-mean(data$K600_daily_mean[!is.na(data$K600_daily_mean)])
depthfilenumber<-which(depthPARENT_IDlist == PARENT_IDlist[i])
depthdata<-read.csv(paste(depthfolder,depthfilenamelist[depthfilenumber],sep=''),header=T,skip=8)
meandepthm<-mean(depthdata$Depth,na.rm=TRUE)
ERdailymeanmeanm3<-ERdailymeanmean/meandepthm
GPPdailymeanmeanm3<-GPPdailymeanmean/meandepthm
lmK600ER = lm(ER_daily_mean~K600_daily_mean, data = data) #Create the linear regression
K600vsERp=summary(lmK600ER)$coefficients[2,4]
K600vsERrsq=summary(lmK600ER)$r.squared
SMresults[nrow(SMresults) + 1,] = c(PARENT_IDlist[i],SITE_IDlist[i], numdays,ERdailymeanmean,GPPdailymeanmean,K600dailymeanmean,meandepthm,ERdailymeanmeanm3,GPPdailymeanmeanm3,K600vsERrsq,K600vsERp)
}
write.csv(SMresults, paste(folder,"SSS_combined_SM_results.csv",sep=""), row.names=FALSE)
# RC2 spatial study
# Extract test data from Manta River raw data
# X Lin Oct 30 2020
rm(list=ls(all=TRUE))
library(xlsx)
#setwd('//pnl/projects/SBR_SFA/RC2/04_Spatial_Study/02_MantaRiver/03_ProcessedData/')
#setwd('C:/Users/linx882/OneDrive - PNNL/XLin/automation of respiration calculations/RC_2/sss_data_processing/codes')
#source('./MRhelper.R')
sdir<- 'C:/Users/linx882/OneDrive - PNNL/XLin/automation of respiration calculations/RC_2/sss_data_processing'
findir<- 'C:/Users/linx882/PNNL/RC-2, River Corridor SFA - Spatial Study 2022'
##########################################################################
## DO slope
DO_summary<-read_csv(file.path(findir,'03_MinidotManualChamber2hr/03_ProcessedData','RC2_Minidot_lm_summary.csv'))
Do_slope<-DO_summary%>%select(Date,Parent_ID,Site_ID,Dissolved_Oxygen_1_Slope,
Dissolved_Oxygen_2_Slope,Dissolved_Oxygen_3_Slope,
Dissolved_Oxygen_1_NRMSE,Dissolved_Oxygen_2_NRMSE,Dissolved_Oxygen_3_NRMSE)
for (i in c(1:3)){
k = which(Do_slope[,paste0('Dissolved_Oxygen_',i,'_NRMSE')]>0.03)
Do_slope[k,paste0('Dissolved_Oxygen_',i,'_Slope')]<-NA
}
## mean_slope: milligrams_per_liter_per_minute(mg/L/min <-->g/m3/min)
Do_slope['DO_Slope_mean']<-rowMeans(Do_slope[,grep('Slope',names(Do_slope))],na.rm = TRUE)
# mean depth
mean_depth<- read_csv(file.path(findir,'SSS_Data_Processing','SSS_Average_Reach_Depth_2023-04-05.csv'))
mean_depth$mean_reach_depth_m <- mean_depth$mean_reach_depth_cm/100
#
Do_slope<- merge(Do_slope,mean_depth[c("Site_ID","mean_reach_depth_m")],by=c('Site_ID'))
# calculate ER water
Do_slope['ERwaterdaily_gO2/m2day'] <-Do_slope$DO_Slope_mean*(60*24)*Do_slope$mean_reach_depth_m
Do_slope['ERwaterdaily_gO2/m3day'] <-Do_slope$DO_Slope_mean*(60*24)
ERwater<-Do_slope[c("Site_ID",'ERwaterdaily_gO2/m2day','ERwaterdaily_gO2/m3day')]
#########################
library("readxl")
ERtotal <- read_excel(file.path(sdir,'SSS_metabolism/SM_analysis','combined_results_040323.xlsx'))
names(ERwater)[1]<-'SiteID'
ERtotal<-merge(ERtotal,ERwater,by=c('SiteID'))
##
#calculate ER sed
ERtotal['ERseddaily_gO2/m2day']<-ERtotal$`ERdailymeanmean_gO2/m2day`-ERtotal$`ERwaterdaily_gO2/m2day`
ERtotal['ERseddaily_gO2/m3day']<-ERtotal$`ERdailymeanmean_gO2/m3day`-ERtotal$`ERwaterdaily_gO2/m3day`
#write.csv(ERtotal,file.path(sdir,'SSS_metabolism/SM_analysis','combined_results_updated_040623.csv'),row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
head(ERwater)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-c(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
ERwater
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
head(ERwater)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
colnames(ERtotal)
colnames(ERwater)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
head(ERall)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
head(ERall)\
head(ERall)
colnames(ERall)[1]
colnames(ERall)[2]
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
head(ERall)
ERall
max(ERall$ERdailymeanmean_gO2.m2day)
max(ERall$ERdailymeanmean_gO2.m2day,2)
min_val <- min(ERall$ERdailymeanmean_gO2.m2day)
if (min_val < 0) {
highest_neg_val <- max(ERall$ERdailymeanmean_gO2.m2day[ERall$ERdailymeanmean_gO2.m2day < 0])
print(highest_neg_val)
} else {
print("There are no negative values in ERall$ERdailymeanmean_gO2.m2day.")
}
min(ERall$ERdailymeanmean_gO2.m2day)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsed%<-ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall <- ERall[ERall$ERdailymeanmean_gO2.m2day <= 0, ]
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsedpct<-ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall <- ERall[ERall$ERdailymeanmean_gO2.m2day <= 0, ]
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsedpct<-ERall$ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
head(ERall)
min(ERall$ERsedpct)
ERall
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall <- ERall[ERall$ERdailymeanmean_gO2.m2day <= 0, ]
ERall_new <- ERall[is.na(ERall$ERwaterm2), ]
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsedpct<-ERall$ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
min(ERall$ERsedpct)
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall <- ERall[ERall$ERdailymeanmean_gO2.m2day <= 0, ]
ERall_new <- ERall[-is.na(ERall$ERwaterm2), ]
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsedpct<-ERall$ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
min(ERall$ERsedpct)
head(ERall)
ERall
ERtotal<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Documents/GitHub/SSS_metabolism/StreamMetabolizer_runs/final_results/SSS_combined_SM_results.csv')
ERwater<-read.csv('C:/Users/kauf093/OneDrive - PNNL/Manuscripts/2022_Spatial_Sed_Resp/Data/combined_results_updated_04262023.csv')
ERwater<-cbind.data.frame(ERwater$Site_ID,ERwater$Parent_ID,ERwater$ERwater_gm2day,ERwater$ERwater_gm3day)
colnames(ERwater)<-cbind('Site_ID','Parent_ID','ERwaterm2','ERwaterm3')
ERall <- merge(ERtotal, ERwater, by = "Parent_ID")
ERall <- subset(ERall, select = -Site_ID.y)
colnames(ERall)[2]<-'Site_ID'
ERall <- ERall[ERall$ERdailymeanmean_gO2.m2day <= 0, ]
ERall <- ERall[!is.na(ERall$ERwaterm2), ]
ERall$ERsedm2<-ERall$ERdailymeanmean_gO2.m2day-ERall$ERwaterm2
ERall$ERsedpct<-ERall$ERsedm2/ERall$ERdailymeanmean_gO2.m2day*100
min(ERall$ERsedpct)
max(ERall$ERsedpct)
