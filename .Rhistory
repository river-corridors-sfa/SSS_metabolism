}
vimp$color <- palettes[as.factor(vimp$Names)]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$Names,
horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp<-data.frame(vimp)
vimp['Names']<-NA
narg<-c("Temperature","Depth","Slope" ,"Velocity" ,"Aridity", "TSS", "Discharge",'NPOC',
"Drainage_Area", "Pct_Forest","Pct_Crop",'Pct_Shrb','D50',
'Hflux','ChlA','Streamorde','GPP')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],row.names(vimp))
vimp$Names[idx]<-narg[v]
}
vimp$color <- palettes[as.factor(vimp$Names)]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$Names,
horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
palettes <- c(brewer.pal(9,name = 'Set1'),brewer.pal(length(xvars)-9,name = 'Set3'))
# sdata1 =sdata
#sdata1$ERsed_Square[sdata1$ERsed_Square>0] = 0
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',#'TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
"hz_annual","Chlorophyll_A",'streamorde','GPP_Square')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
mtry <- tuneRF(sdata[,-1],sdata[,1], ntreeTry=1000,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
#explain_forest(rf_fit, interactions = TRUE, data = sdata)
reprtree:::plot.getTree(rf_fit,k=100, depth = 10)
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=1)
png(file.path(outdir,'ERsed',paste0('rf_importance_no_transform_all','.png')),
width = 8, height = 6, units = 'in', res = 600)
par(mgp=c(2,0.5,0),mar=c(10.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp<-data.frame(vimp)
vimp['Names']<-NA
narg<-c("Temperature","Depth","Slope" ,"Velocity" ,"Aridity", "TSS", "Discharge",'NPOC',
"Drainage_Area", "Pct_Forest","Pct_Crop",'Pct_Shrb','D50',
'Hflux','ChlA','Streamorde','GPP')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],row.names(vimp))
vimp$Names[idx]<-narg[v]
}
vimp$color <- palettes[as.factor(vimp$Names)]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$Names,
horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
dev.off()
reprtree:::plot.getTree(rf_fit,k=100, depth = 10)
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=1)
png(file.path(outdir,'ERsed',paste0('rf_importance_no_transform_all','.png')),
width = 8, height = 6, units = 'in', res = 600)
par(mgp=c(2,0.5,0),mar=c(10.5,3.1,2.1,1))
#rimp <- importance(rf_fit)
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp<-data.frame(vimp)
vimp['Names']<-NA
narg<-c("Temperature","-Mean_Depth","Slope" ,"Velocity" ,"Aridity", "TSS", "Discharge",'NPOC',
"Drainage_Area", "Pct_Forest","Pct_Crop",'Pct_Shrb','D50',
'Hflux','ChlA','Streamorde','GPP')
for (v in 1:length(xvars)){
idx <- grep(xvars[v],row.names(vimp))
vimp$Names[idx]<-narg[v]
}
vimp$color <- palettes[as.factor(vimp$Names)]
barplot(vimp$vimp/sum(vimp$vimp),col =vimp$color , names.arg=vimp$Names,
horiz = FALSE,las=3,cex.lab=1.5, cex.axis=1.5,
cex.main=2,cex.names=1.5,ylab="Relative Importance")#,main=paste0("RF Feature Importance (PoreWater)"))
dev.off()
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=1)
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=2)
?ReprTree
plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=1)
?plot.reprtree
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=5,index=all)
reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=6)
library(rpart.plot)
rpart.plot(rf_fit$tree, type = 1, extra = 1)
tree
reprtree:::plot.getTree(rf_fit,k=100, depth = 10)
png(file.path(outdir,'ERsed',paste0('rf_importance_tree_100_all','.png')),
width = 6, height = 6, units = 'in', res = 600)
par(mgp=c(2,0.5,0),mar=c(3.5,3.1,2.1,1))
reprtree:::plot.getTree(rf_fit,k=100, depth = 10)
#reprtree:::plot.reprtree(ReprTree(rf_fit, sdata, metric='d2'),depth=6)
dev.off()
?plot.getTree
palettes <- c(brewer.pal(9,name = 'Set1'),brewer.pal(length(xvars)-9,name = 'Set3'))
# sdata1 =sdata
#sdata1$ERsed_Square[sdata1$ERsed_Square>0] = 0
yvar ='ERsed_Square'
xvars = c("HOBO_Temp",'Mean_Depth',"Slope","Velocity" , "AridityWs","TSS","Discharge", 'NPOC',#'TN',
"totdasqkm","PctMxFst2019Ws","PctCrop2019Ws",'PctShrb2019Ws','D50_m',
"hz_annual","Chlorophyll_A",'streamorde','GPP_Square')
sdata = cdata[c(yvar,xvars)];#
sdata =sdata[sdata$ERsed_Square<=0,]
sdata =na.omit(sdata)
mtry <- tuneRF(sdata[,-1],sdata[,1], ntreeTry=1000,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
par(mgp=c(2,0.5,0),mar=c(3.5,3.1,2.1,1))
reprtree:::plot.getTree(rf_fit,k=100, depth = 10)
tree
View(tree)
?plot.getTree
?text.tree
reprtree:::plot.getTree(rf_fit,k=100, depth = 10,digit=3)
rf_fit
library("rpart")
library("rpart.plot")
rf_fit2 <- rpart(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
library("rpart")
library("rpart.plot")
rf_fit2 <- rpart(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
rf_fit2 <- rpart(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE) #nPerm=3,
?rpart
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata) #nPerm=3,
rf_fit2
# plot the tree
rpart.plot(rf_fit2)
predicted2 <- unname(predict(rf_fit2, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata) #nPerm=3,
predicted2 <- unname(predict(rf_fit2, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
# plot the tree
rpart.plot(rf_fit2)
rf_fit2$variable.importance
vimp <- setNames(as.data.frame(rf_fit$importance)$IncNodePurity, row.names(as.data.frame(rf_fit$importance)))
vimp<- sort(vimp,decreasing = TRUE)
vimp<-data.frame(vimp)
vimp
rf_fit2
set.seed(1)
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata) #nPerm=3,
predicted2 <- unname(predict(rf_fit2, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
R2
rf_fit2$method
rf_fit2$where
rf_fit2$variable.importance
?rpart.plot
# plot the tree
rpart.plot(rf_fit2)
rf_fit2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
plot(tree)
View(cdata)
View(cdata)
plot(tree, type = "simple")
library(party)
plot(tree, type = "simple")
# library("rpart")
# library("rpart.plot")
# set.seed(1)
# rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata) #nPerm=3,
# predicted2 <- unname(predict(rf_fit2, data=cdata))
# R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
# R2
# # plot the tree
# rpart.plot(rf_fit2)
library(party)
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
plot(tree, type = "simple")
tree
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata,cp=0.01) #nPerm=3,
predicted2 <- unname(predict(rf_fit2, data=cdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=sdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit <- randomForest(ERsed_Square ~ ., ntree=100,nodesize=5, #maxnodes=5,
mtry=6, data=sdata, importance=TRUE, do.trace=100) #nPerm=3,
predicted <- unname(predict(rf_fit, data=sdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
set.seed(1)
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata,cp=0.01) #nPerm=3,
predicted2 <- unname(predict(rf_fit2, data=sdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
# plot the tree
rpart.plot(rf_fit2)
set.seed(1)
rf_fit2 <- rpart(ERsed_Square ~ ., data=sdata,cp=0.001) #nPerm=3,
predicted2 <- unname(predict(rf_fit2, data=sdata))
R2 <- 1 - (sum((sdata$ERsed_Square-predicted2)^2)/sum((sdata$ERsed_Square-mean(sdata$ERsed_Square))^2))
R2
# plot the tree
rpart.plot(rf_fit2)
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
plot(tree, type = "simple")
par(mgp=c(2,0.5,0),mar=c(3.5,3.1,2.1,1))
reprtree:::plot.getTree(rf_fit,k=100, depth = 10,digit=3)
plot.getTree(tree)
rf_fit
rf_fit$forest[1]
plot.reprtree(tree)
reprtree:::plot.reprtree(tree)
ReprTree(rf_fit, sdata, metric='d2')
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
reprtree:::plot.reprtree(tree)
reprtree:::plot.tree(tree)
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
reprtree:::plot.tree(tree)
reprtree:::plot.getTree(rf_fit,k=100, depth = 10,digit=5)
tree<- getTree(rf_fit, k=1, labelVar=FALSE)
plot(tree)
tree_func <- function(final_model,tree_num) {
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 2))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
return(plot)
}
ggsave(tree_func(wine.bag,1),file="test.png",width=12,height=8)
ggsave(tree_func(rf_fit,1),file="test.png",width=12,height=8)
library(dplyr)
library(ggraph)
library(igraph)
ggsave(tree_func(rf_fit,1),file="test.png",width=12,height=8)
getwd()
final_model=rf_fit
tree_num=1
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph_frame
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
graph
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 2))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
plot
graph
tree
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree
randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE)
randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column()
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 2))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
plot
graph
V(graph)$split
tree$`split point`
as.character(round(tree$`split point`, digits = 2))
tree_func <- function(final_model,tree_num) {
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column()
# %>%
# # make leaf split points to NA, so the 0s won't get plotted
# mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree$`split point`<- round(tree$`split point`, digits = 3)
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 3))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5,hjust = 1, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
return(plot)
}
ggsave(tree_func(rf_fit,1),file="test.png",width=12,height=8)
tree_func <- function(final_model,tree_num) {
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column()
# %>%
# # make leaf split points to NA, so the 0s won't get plotted
# mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree$`split point`<- round(tree$`split point`, digits = 3)
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 3))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5,hjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
return(plot)
}
ggsave(tree_func(rf_fit,1),file="test.png",width=12,height=8)
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column()
# %>%
# # make leaf split points to NA, so the 0s won't get plotted
# mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree$`split point`<- round(tree$`split point`, digits = 3)
tree
# %>%
# # make leaf split points to NA, so the 0s won't get plotted
# mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree$prediction<- round(tree$prediction, digits = 3)
tree_func <- function(final_model,tree_num) {
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column()
# %>%
# # make leaf split points to NA, so the 0s won't get plotted
# mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
tree$prediction<- round(tree$prediction, digits = 3)
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
graph <- graph_from_data_frame(graph_frame) %>% delete_vertices("0")
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 3))
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
return(plot)
}
ggsave(tree_func(rf_fit,1),file="test.png",width=12,height=8)
